name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GOOGLE_API_KEY: ${{ secrets.GOOGLE_GEMINI_API }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  VPS_HOST: ${{ secrets.VPS_HOST }}
  VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
  VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
  BACKEND_IMAGE: kothakoli-backend
  FRONTEND_IMAGE: kothakoli-frontend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest
          ${{ env.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }}
        cache-from: type=registry,ref=${{ env.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE }}:buildcache,mode=max

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest
          ${{ env.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}
        cache-from: type=registry,ref=${{ env.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE }}:buildcache,mode=max
        build-args: |
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}

    - name: Create SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Create deployment script
      run: |
        echo '#!/bin/bash
        
        # Stop and remove existing containers
        docker-compose down || true
        
        # Pull new images
        docker-compose pull
        
        # Start containers with new images
        docker-compose up -d
        
        # Remove unused images
        docker image prune -f' > deploy.sh
        chmod +x deploy.sh

    - name: Update docker-compose.yml for production
      run: |
        cat > docker-compose.yml << EOL
        version: '3.8'
        
        services:
          backend:
            image: ${{ env.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }}
            restart: unless-stopped
            ports:
              - "8000:8000"
            volumes:
              - ./storage:/app/storage
              - ./logs:/app/logs
            environment:
              - MONGODB_URL=\${MONGODB_URL}
              - JWT_SECRET=\${JWT_SECRET}
              - FRONTEND_URL=\${FRONTEND_URL}
              - APP_NAME=Kothakoli
              - APP_VERSION=1.0.0
              - CORS_ORIGINS=\${CORS_ORIGINS}
              - API_PREFIX=/api
              - SMTP_HOST=\${SMTP_HOST}
              - SMTP_PORT=\${SMTP_PORT}
              - SMTP_USERNAME=\${SMTP_USERNAME}
              - SMTP_PASSWORD=\${SMTP_PASSWORD}
              - SMTP_FROM_EMAIL=\${SMTP_FROM_EMAIL}
              - GOOGLE_API_KEY=\${GOOGLE_API_KEY}
              - REDIS_URL=\${REDIS_URL}
              - ENCRYPTION_KEY=\${ENCRYPTION_KEY}
              - ENVIRONMENT=production
              - DEBUG=false
        
          frontend:
            image: ${{ env.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}
            restart: unless-stopped
            ports:
              - "3000:3000"
            environment:
              - NEXT_PUBLIC_API_URL=\${NEXT_PUBLIC_API_URL}
        EOL

    - name: Copy deployment files to VPS
      run: |
        # Copy docker-compose and deployment script
        scp -i ~/.ssh/id_rsa docker-compose.yml ${{ env.VPS_USERNAME }}@${{ env.VPS_HOST }}:~/
        scp -i ~/.ssh/id_rsa deploy.sh ${{ env.VPS_USERNAME }}@${{ env.VPS_HOST }}:~/
        
        # Create .env file with production values
        echo "MONGODB_URL=${{ secrets.MONGODB_URL }}
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        FRONTEND_URL=${{ secrets.FRONTEND_URL }}
        NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
        CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}
        SMTP_HOST=${{ secrets.SMTP_HOST }}
        SMTP_PORT=${{ secrets.SMTP_PORT }}
        SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
        SMTP_FROM_EMAIL=${{ secrets.SMTP_FROM_EMAIL }}
        GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
        REDIS_URL=${{ secrets.REDIS_URL }}
        ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}" > .env
        
        scp -i ~/.ssh/id_rsa .env ${{ env.VPS_USERNAME }}@${{ env.VPS_HOST }}:~/

    - name: Deploy to VPS
      run: |
        ssh -i ~/.ssh/id_rsa ${{ env.VPS_USERNAME }}@${{ env.VPS_HOST }} '
          # Execute deployment script
          cd ~/ && ./deploy.sh
        '

    - name: Cleanup
      if: always()
      run: rm -f ~/.ssh/id_rsa

    - name: Verify Deployment
      run: |
        # Wait for services to be up
        sleep 30
        # Check if backend is responding
        curl --fail http://${{ env.VPS_HOST }}:8000/health || exit 1
        # Check if frontend is responding
        curl --fail http://${{ env.VPS_HOST }}:3000 || exit 1
