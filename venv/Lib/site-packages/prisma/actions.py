# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class UserActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model


    async def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Create a new User record.

        Parameters
        ----------
        data
            User record data
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created User record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a User record from just the required fields
        user = await User.prisma().create(
            data={
                # data to create a User record
                'email': 'bbadfchfja',
                'password': 'dhheabfhf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple User records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of User record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await User.prisma().create_many(
            data=[
                {
                    # data to create a User record
                    'email': 'ggciceaie',
                    'password': 'bbehjachib',
                },
                {
                    # data to create a User record
                    'email': 'cadfabfehe',
                    'password': 'dgiiaaijj',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single User record.

        Parameters
        ----------
        where
            User filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The deleted User record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().delete(
            where={
                'id': 'bfaiacjjfc',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique User record.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique(
            where={
                'id': 'eigcfgbif',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Find a unique User record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique_or_raise(
            where={
                'id': 'bagcfbhiig',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple User records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N results
        where
            User filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.User]
            The list of all User records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 User records
        users = await User.prisma().find_many(take=10)

        # find the first 5 User records ordered by the id field
        users = await User.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single User record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the email field
        user = await User.prisma().find_first(
            skip=1,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single User record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the password field
        user = await User.prisma().find_first_or_raise(
            skip=1,
            order={
                'password': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single User record.

        Parameters
        ----------
        data
            User record data specifying what to update
        where
            User filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The updated User record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().update(
            where={
                'id': 'cghideieh',
            },
            data={
                # data to update the User record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            User filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created or updated User record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().upsert(
            where={
                'id': 'biabhbdai',
            },
            data={
                'create': {
                    'id': 'biabhbdai',
                    'email': 'cadfabfehe',
                    'password': 'dgiiaaijj',
                },
                'update': {
                    'email': 'cadfabfehe',
                    'password': 'dgiiaaijj',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> int:
        """Update multiple User records

        Parameters
        ----------
        data
            User data to update the selected User records to
        where
            Filter to select the User records to update

        Returns
        -------
        int
            The total number of User records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all User records
        total = await User.prisma().update_many(
            data={
                'name': 'idghgaicb'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> int:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'apiKey': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> types.UserCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> Union[int, types.UserCountAggregateOutput]:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'modelName': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None
    ) -> int:
        """Delete multiple User records.

        Parameters
        ----------
        where
            Optional User filter to find the records to be deleted

        Returns
        -------
        int
            The total number of User records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all User records
        total = await User.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserScalarFieldKeys'],
        *,
        where: Optional['types.UserWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserAvgAggregateInput'] = None,
        sum: Optional['types.UserSumAggregateInput'] = None,
        min: Optional['types.UserMinAggregateInput'] = None,
        max: Optional['types.UserMaxAggregateInput'] = None,
        having: Optional['types.UserScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserGroupByOutput']:
        """Group User records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar User fields to group records by
        where
            User filter to select records
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserGroupByOutput]
            A list of dictionaries representing the User record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group User records by isVerified values
        # and count how many records are in each group
        results = await User.prisma().group_by(
            ['isVerified'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class StoryActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model


    async def create(
        self,
        data: types.StoryCreateInput,
        include: Optional[types.StoryInclude] = None
    ) -> _PrismaModelT:
        """Create a new Story record.

        Parameters
        ----------
        data
            Story record data
        include
            Specifies which relations should be loaded on the returned Story model

        Returns
        -------
        prisma.models.Story
            The created Story record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Story record from just the required fields
        story = await Story.prisma().create(
            data={
                # data to create a Story record
                'model': 'fjfddhigg',
                'title': 'hjaecfifb',
                'content': 'cbbbjbfcii',
                'prompt': 'bbejhfidcb',
                'userId': 'bgeecijdgg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.StoryCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Story records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Story record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Story.prisma().create_many(
            data=[
                {
                    # data to create a Story record
                    'model': 'bdiicjafbj',
                    'title': 'bgehebiafc',
                    'content': 'bghffegacj',
                    'prompt': 'bhghchehcc',
                    'userId': 'dcgchcbbf',
                },
                {
                    # data to create a Story record
                    'model': 'bdedcabahc',
                    'title': 'ghfhiafcb',
                    'content': 'heejgedji',
                    'prompt': 'bjgjgibgbf',
                    'userId': 'bbbgbhfjge',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.StoryWhereUniqueInput,
        include: Optional[types.StoryInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Story record.

        Parameters
        ----------
        where
            Story filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Story model

        Returns
        -------
        prisma.models.Story
            The deleted Story record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        story = await Story.prisma().delete(
            where={
                'id': 'igbehcbab',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.StoryWhereUniqueInput,
        include: Optional[types.StoryInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Story record.

        Parameters
        ----------
        where
            Story filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Story model

        Returns
        -------
        prisma.models.Story
            The found Story record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        story = await Story.prisma().find_unique(
            where={
                'id': 'bdadaadhag',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.StoryWhereUniqueInput,
        include: Optional[types.StoryInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Story record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Story filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Story model

        Returns
        -------
        prisma.models.Story
            The found Story record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        story = await Story.prisma().find_unique_or_raise(
            where={
                'id': 'bgiggdidbf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.StoryWhereInput] = None,
        cursor: Optional[types.StoryWhereUniqueInput] = None,
        include: Optional[types.StoryInclude] = None,
        order: Optional[Union[types.StoryOrderByInput, List[types.StoryOrderByInput]]] = None,
        distinct: Optional[List[types.StoryScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Story records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Story records returned
        skip
            Ignore the first N results
        where
            Story filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Story model
        order
            Order the returned Story records by any field
        distinct
            Filter Story records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Story]
            The list of all Story records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Story records
        storys = await Story.prisma().find_many(take=10)

        # find the first 5 Story records ordered by the id field
        storys = await Story.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.StoryWhereInput] = None,
        cursor: Optional[types.StoryWhereUniqueInput] = None,
        include: Optional[types.StoryInclude] = None,
        order: Optional[Union[types.StoryOrderByInput, List[types.StoryOrderByInput]]] = None,
        distinct: Optional[List[types.StoryScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Story record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Story filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Story model
        order
            Order the returned Story records by any field
        distinct
            Filter Story records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Story
            The first Story record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Story record ordered by the model field
        story = await Story.prisma().find_first(
            skip=1,
            order={
                'model': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.StoryWhereInput] = None,
        cursor: Optional[types.StoryWhereUniqueInput] = None,
        include: Optional[types.StoryInclude] = None,
        order: Optional[Union[types.StoryOrderByInput, List[types.StoryOrderByInput]]] = None,
        distinct: Optional[List[types.StoryScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Story record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Story filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Story model
        order
            Order the returned Story records by any field
        distinct
            Filter Story records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Story
            The first Story record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Story record ordered by the title field
        story = await Story.prisma().find_first_or_raise(
            skip=1,
            order={
                'title': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.StoryUpdateInput,
        where: types.StoryWhereUniqueInput,
        include: Optional[types.StoryInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Story record.

        Parameters
        ----------
        data
            Story record data specifying what to update
        where
            Story filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Story model

        Returns
        -------
        prisma.models.Story
            The updated Story record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        story = await Story.prisma().update(
            where={
                'id': 'caaaedabfc',
            },
            data={
                # data to update the Story record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.StoryWhereUniqueInput,
        data: types.StoryUpsertInput,
        include: Optional[types.StoryInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Story filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Story model

        Returns
        -------
        prisma.models.Story
            The created or updated Story record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        story = await Story.prisma().upsert(
            where={
                'id': 'bigibebcib',
            },
            data={
                'create': {
                    'id': 'bigibebcib',
                    'model': 'bdedcabahc',
                    'title': 'ghfhiafcb',
                    'content': 'heejgedji',
                    'prompt': 'bjgjgibgbf',
                    'userId': 'bbbgbhfjge',
                },
                'update': {
                    'model': 'bdedcabahc',
                    'title': 'ghfhiafcb',
                    'content': 'heejgedji',
                    'prompt': 'bjgjgibgbf',
                    'userId': 'bbbgbhfjge',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.StoryUpdateManyMutationInput,
        where: types.StoryWhereInput,
    ) -> int:
        """Update multiple Story records

        Parameters
        ----------
        data
            Story data to update the selected Story records to
        where
            Filter to select the Story records to update

        Returns
        -------
        int
            The total number of Story records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Story records
        total = await Story.prisma().update_many(
            data={
                'content': 'bigaiehgcc'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.StoryWhereInput] = None,
        cursor: Optional[types.StoryWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Story records present in the database

        Parameters
        ----------
        select
            Select the Story fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Story filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.StoryCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Story.prisma().count()

        # results: prisma.types.StoryCountAggregateOutput
        results = await Story.prisma().count(
            select={
                '_all': True,
                'prompt': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.StoryCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.StoryWhereInput] = None,
        cursor: Optional[types.StoryWhereUniqueInput] = None,
    ) -> types.StoryCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.StoryCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.StoryWhereInput] = None,
        cursor: Optional[types.StoryWhereUniqueInput] = None,
    ) -> Union[int, types.StoryCountAggregateOutput]:
        """Count the number of Story records present in the database

        Parameters
        ----------
        select
            Select the Story fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Story filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.StoryCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Story.prisma().count()

        # results: prisma.types.StoryCountAggregateOutput
        results = await Story.prisma().count(
            select={
                '_all': True,
                'userId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.StoryCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.StoryWhereInput] = None
    ) -> int:
        """Delete multiple Story records.

        Parameters
        ----------
        where
            Optional Story filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Story records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Story records
        total = await Story.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.StoryScalarFieldKeys'],
        *,
        where: Optional['types.StoryWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.StoryAvgAggregateInput'] = None,
        sum: Optional['types.StorySumAggregateInput'] = None,
        min: Optional['types.StoryMinAggregateInput'] = None,
        max: Optional['types.StoryMaxAggregateInput'] = None,
        having: Optional['types.StoryScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.StoryCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.StoryScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.StoryScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.StoryGroupByOutput']:
        """Group Story records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Story fields to group records by
        where
            Story filter to select records
        take
            Limit the maximum number of Story records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.StoryGroupByOutput]
            A list of dictionaries representing the Story record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Story records by createdAt values
        # and count how many records are in each group
        results = await Story.prisma().group_by(
            ['createdAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ChatMessageActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model


    async def create(
        self,
        data: types.ChatMessageCreateInput,
        include: Optional[types.ChatMessageInclude] = None
    ) -> _PrismaModelT:
        """Create a new ChatMessage record.

        Parameters
        ----------
        data
            ChatMessage record data
        include
            Specifies which relations should be loaded on the returned ChatMessage model

        Returns
        -------
        prisma.models.ChatMessage
            The created ChatMessage record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a ChatMessage record from just the required fields
        chatmessage = await ChatMessage.prisma().create(
            data={
                # data to create a ChatMessage record
                'model': 'beeifcbebf',
                'message': 'bgcigfahea',
                'content': 'bcejgaggif',
                'userId': 'idfjadbcc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ChatMessageCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple ChatMessage records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of ChatMessage record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await ChatMessage.prisma().create_many(
            data=[
                {
                    # data to create a ChatMessage record
                    'model': 'hgdhbjhhj',
                    'message': 'ecjjjfbae',
                    'content': 'bhhfibbigf',
                    'userId': 'ijdbeffgg',
                },
                {
                    # data to create a ChatMessage record
                    'model': 'jjfeafhfj',
                    'message': 'cbachdgfce',
                    'content': 'chbfcacbd',
                    'userId': 'efggddide',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ChatMessageWhereUniqueInput,
        include: Optional[types.ChatMessageInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single ChatMessage record.

        Parameters
        ----------
        where
            ChatMessage filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned ChatMessage model

        Returns
        -------
        prisma.models.ChatMessage
            The deleted ChatMessage record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        chatmessage = await ChatMessage.prisma().delete(
            where={
                'id': 'caficfigfb',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ChatMessageWhereUniqueInput,
        include: Optional[types.ChatMessageInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique ChatMessage record.

        Parameters
        ----------
        where
            ChatMessage filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned ChatMessage model

        Returns
        -------
        prisma.models.ChatMessage
            The found ChatMessage record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        chatmessage = await ChatMessage.prisma().find_unique(
            where={
                'id': 'bfidgijfjc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ChatMessageWhereUniqueInput,
        include: Optional[types.ChatMessageInclude] = None
    ) -> _PrismaModelT:
        """Find a unique ChatMessage record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            ChatMessage filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned ChatMessage model

        Returns
        -------
        prisma.models.ChatMessage
            The found ChatMessage record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        chatmessage = await ChatMessage.prisma().find_unique_or_raise(
            where={
                'id': 'ihieecagf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ChatMessageWhereInput] = None,
        cursor: Optional[types.ChatMessageWhereUniqueInput] = None,
        include: Optional[types.ChatMessageInclude] = None,
        order: Optional[Union[types.ChatMessageOrderByInput, List[types.ChatMessageOrderByInput]]] = None,
        distinct: Optional[List[types.ChatMessageScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple ChatMessage records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of ChatMessage records returned
        skip
            Ignore the first N results
        where
            ChatMessage filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ChatMessage model
        order
            Order the returned ChatMessage records by any field
        distinct
            Filter ChatMessage records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.ChatMessage]
            The list of all ChatMessage records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 ChatMessage records
        chatmessages = await ChatMessage.prisma().find_many(take=10)

        # find the first 5 ChatMessage records ordered by the id field
        chatmessages = await ChatMessage.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ChatMessageWhereInput] = None,
        cursor: Optional[types.ChatMessageWhereUniqueInput] = None,
        include: Optional[types.ChatMessageInclude] = None,
        order: Optional[Union[types.ChatMessageOrderByInput, List[types.ChatMessageOrderByInput]]] = None,
        distinct: Optional[List[types.ChatMessageScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single ChatMessage record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            ChatMessage filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ChatMessage model
        order
            Order the returned ChatMessage records by any field
        distinct
            Filter ChatMessage records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.ChatMessage
            The first ChatMessage record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second ChatMessage record ordered by the model field
        chatmessage = await ChatMessage.prisma().find_first(
            skip=1,
            order={
                'model': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ChatMessageWhereInput] = None,
        cursor: Optional[types.ChatMessageWhereUniqueInput] = None,
        include: Optional[types.ChatMessageInclude] = None,
        order: Optional[Union[types.ChatMessageOrderByInput, List[types.ChatMessageOrderByInput]]] = None,
        distinct: Optional[List[types.ChatMessageScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single ChatMessage record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            ChatMessage filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned ChatMessage model
        order
            Order the returned ChatMessage records by any field
        distinct
            Filter ChatMessage records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.ChatMessage
            The first ChatMessage record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second ChatMessage record ordered by the message field
        chatmessage = await ChatMessage.prisma().find_first_or_raise(
            skip=1,
            order={
                'message': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ChatMessageUpdateInput,
        where: types.ChatMessageWhereUniqueInput,
        include: Optional[types.ChatMessageInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single ChatMessage record.

        Parameters
        ----------
        data
            ChatMessage record data specifying what to update
        where
            ChatMessage filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned ChatMessage model

        Returns
        -------
        prisma.models.ChatMessage
            The updated ChatMessage record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        chatmessage = await ChatMessage.prisma().update(
            where={
                'id': 'bghfciaafe',
            },
            data={
                # data to update the ChatMessage record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ChatMessageWhereUniqueInput,
        data: types.ChatMessageUpsertInput,
        include: Optional[types.ChatMessageInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            ChatMessage filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned ChatMessage model

        Returns
        -------
        prisma.models.ChatMessage
            The created or updated ChatMessage record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        chatmessage = await ChatMessage.prisma().upsert(
            where={
                'id': 'bgchfhgceh',
            },
            data={
                'create': {
                    'id': 'bgchfhgceh',
                    'model': 'jjfeafhfj',
                    'message': 'cbachdgfce',
                    'content': 'chbfcacbd',
                    'userId': 'efggddide',
                },
                'update': {
                    'model': 'jjfeafhfj',
                    'message': 'cbachdgfce',
                    'content': 'chbfcacbd',
                    'userId': 'efggddide',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ChatMessageUpdateManyMutationInput,
        where: types.ChatMessageWhereInput,
    ) -> int:
        """Update multiple ChatMessage records

        Parameters
        ----------
        data
            ChatMessage data to update the selected ChatMessage records to
        where
            Filter to select the ChatMessage records to update

        Returns
        -------
        int
            The total number of ChatMessage records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all ChatMessage records
        total = await ChatMessage.prisma().update_many(
            data={
                'content': 'cafeiaccbc'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ChatMessageWhereInput] = None,
        cursor: Optional[types.ChatMessageWhereUniqueInput] = None,
    ) -> int:
        """Count the number of ChatMessage records present in the database

        Parameters
        ----------
        select
            Select the ChatMessage fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            ChatMessage filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ChatMessageCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await ChatMessage.prisma().count()

        # results: prisma.types.ChatMessageCountAggregateOutput
        results = await ChatMessage.prisma().count(
            select={
                '_all': True,
                'userId': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ChatMessageCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ChatMessageWhereInput] = None,
        cursor: Optional[types.ChatMessageWhereUniqueInput] = None,
    ) -> types.ChatMessageCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ChatMessageCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ChatMessageWhereInput] = None,
        cursor: Optional[types.ChatMessageWhereUniqueInput] = None,
    ) -> Union[int, types.ChatMessageCountAggregateOutput]:
        """Count the number of ChatMessage records present in the database

        Parameters
        ----------
        select
            Select the ChatMessage fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            ChatMessage filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ChatMessageCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await ChatMessage.prisma().count()

        # results: prisma.types.ChatMessageCountAggregateOutput
        results = await ChatMessage.prisma().count(
            select={
                '_all': True,
                'createdAt': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ChatMessageCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ChatMessageWhereInput] = None
    ) -> int:
        """Delete multiple ChatMessage records.

        Parameters
        ----------
        where
            Optional ChatMessage filter to find the records to be deleted

        Returns
        -------
        int
            The total number of ChatMessage records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all ChatMessage records
        total = await ChatMessage.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ChatMessageScalarFieldKeys'],
        *,
        where: Optional['types.ChatMessageWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ChatMessageAvgAggregateInput'] = None,
        sum: Optional['types.ChatMessageSumAggregateInput'] = None,
        min: Optional['types.ChatMessageMinAggregateInput'] = None,
        max: Optional['types.ChatMessageMaxAggregateInput'] = None,
        having: Optional['types.ChatMessageScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ChatMessageCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ChatMessageScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ChatMessageScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ChatMessageGroupByOutput']:
        """Group ChatMessage records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar ChatMessage fields to group records by
        where
            ChatMessage filter to select records
        take
            Limit the maximum number of ChatMessage records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ChatMessageGroupByOutput]
            A list of dictionaries representing the ChatMessage record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group ChatMessage records by updatedAt values
        # and count how many records are in each group
        results = await ChatMessage.prisma().group_by(
            ['updatedAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class FileActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model


    async def create(
        self,
        data: types.FileCreateInput,
        include: Optional[types.FileInclude] = None
    ) -> _PrismaModelT:
        """Create a new File record.

        Parameters
        ----------
        data
            File record data
        include
            Specifies which relations should be loaded on the returned File model

        Returns
        -------
        prisma.models.File
            The created File record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a File record from just the required fields
        file = await File.prisma().create(
            data={
                # data to create a File record
                'model': 'gaddfhfh',
                'filename': 'gieegcbeg',
                'content': 'bgcffadich',
                'response': 'fcbichhci',
                'userId': 'bcggadccgf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.FileCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple File records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of File record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await File.prisma().create_many(
            data=[
                {
                    # data to create a File record
                    'model': 'jdcfdcgc',
                    'filename': 'cafdaehjid',
                    'content': 'gifdddbia',
                    'response': 'bchehecef',
                    'userId': 'jeijcbhfe',
                },
                {
                    # data to create a File record
                    'model': 'bjgejjabff',
                    'filename': 'bcciijbibg',
                    'content': 'cffcachfd',
                    'response': 'bccdfhdigc',
                    'userId': 'febcgjbfj',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.FileWhereUniqueInput,
        include: Optional[types.FileInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single File record.

        Parameters
        ----------
        where
            File filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned File model

        Returns
        -------
        prisma.models.File
            The deleted File record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        file = await File.prisma().delete(
            where={
                'id': 'bageiegghg',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.FileWhereUniqueInput,
        include: Optional[types.FileInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique File record.

        Parameters
        ----------
        where
            File filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned File model

        Returns
        -------
        prisma.models.File
            The found File record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        file = await File.prisma().find_unique(
            where={
                'id': 'faidicegb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.FileWhereUniqueInput,
        include: Optional[types.FileInclude] = None
    ) -> _PrismaModelT:
        """Find a unique File record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            File filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned File model

        Returns
        -------
        prisma.models.File
            The found File record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        file = await File.prisma().find_unique_or_raise(
            where={
                'id': 'bacecgfhbe',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.FileWhereInput] = None,
        cursor: Optional[types.FileWhereUniqueInput] = None,
        include: Optional[types.FileInclude] = None,
        order: Optional[Union[types.FileOrderByInput, List[types.FileOrderByInput]]] = None,
        distinct: Optional[List[types.FileScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple File records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of File records returned
        skip
            Ignore the first N results
        where
            File filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned File model
        order
            Order the returned File records by any field
        distinct
            Filter File records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.File]
            The list of all File records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 File records
        files = await File.prisma().find_many(take=10)

        # find the first 5 File records ordered by the id field
        files = await File.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.FileWhereInput] = None,
        cursor: Optional[types.FileWhereUniqueInput] = None,
        include: Optional[types.FileInclude] = None,
        order: Optional[Union[types.FileOrderByInput, List[types.FileOrderByInput]]] = None,
        distinct: Optional[List[types.FileScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single File record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            File filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned File model
        order
            Order the returned File records by any field
        distinct
            Filter File records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.File
            The first File record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second File record ordered by the model field
        file = await File.prisma().find_first(
            skip=1,
            order={
                'model': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.FileWhereInput] = None,
        cursor: Optional[types.FileWhereUniqueInput] = None,
        include: Optional[types.FileInclude] = None,
        order: Optional[Union[types.FileOrderByInput, List[types.FileOrderByInput]]] = None,
        distinct: Optional[List[types.FileScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single File record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            File filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned File model
        order
            Order the returned File records by any field
        distinct
            Filter File records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.File
            The first File record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second File record ordered by the filename field
        file = await File.prisma().find_first_or_raise(
            skip=1,
            order={
                'filename': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.FileUpdateInput,
        where: types.FileWhereUniqueInput,
        include: Optional[types.FileInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single File record.

        Parameters
        ----------
        data
            File record data specifying what to update
        where
            File filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned File model

        Returns
        -------
        prisma.models.File
            The updated File record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        file = await File.prisma().update(
            where={
                'id': 'ihcahiead',
            },
            data={
                # data to update the File record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.FileWhereUniqueInput,
        data: types.FileUpsertInput,
        include: Optional[types.FileInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            File filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned File model

        Returns
        -------
        prisma.models.File
            The created or updated File record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        file = await File.prisma().upsert(
            where={
                'id': 'biheheiajg',
            },
            data={
                'create': {
                    'id': 'biheheiajg',
                    'model': 'bjgejjabff',
                    'filename': 'bcciijbibg',
                    'content': 'cffcachfd',
                    'response': 'bccdfhdigc',
                    'userId': 'febcgjbfj',
                },
                'update': {
                    'model': 'bjgejjabff',
                    'filename': 'bcciijbibg',
                    'content': 'cffcachfd',
                    'response': 'bccdfhdigc',
                    'userId': 'febcgjbfj',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.FileUpdateManyMutationInput,
        where: types.FileWhereInput,
    ) -> int:
        """Update multiple File records

        Parameters
        ----------
        data
            File data to update the selected File records to
        where
            Filter to select the File records to update

        Returns
        -------
        int
            The total number of File records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all File records
        total = await File.prisma().update_many(
            data={
                'content': 'jbgijghgb'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.FileWhereInput] = None,
        cursor: Optional[types.FileWhereUniqueInput] = None,
    ) -> int:
        """Count the number of File records present in the database

        Parameters
        ----------
        select
            Select the File fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            File filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.FileCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await File.prisma().count()

        # results: prisma.types.FileCountAggregateOutput
        results = await File.prisma().count(
            select={
                '_all': True,
                'response': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.FileCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.FileWhereInput] = None,
        cursor: Optional[types.FileWhereUniqueInput] = None,
    ) -> types.FileCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.FileCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.FileWhereInput] = None,
        cursor: Optional[types.FileWhereUniqueInput] = None,
    ) -> Union[int, types.FileCountAggregateOutput]:
        """Count the number of File records present in the database

        Parameters
        ----------
        select
            Select the File fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            File filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.FileCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await File.prisma().count()

        # results: prisma.types.FileCountAggregateOutput
        results = await File.prisma().count(
            select={
                '_all': True,
                'userId': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.FileCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.FileWhereInput] = None
    ) -> int:
        """Delete multiple File records.

        Parameters
        ----------
        where
            Optional File filter to find the records to be deleted

        Returns
        -------
        int
            The total number of File records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all File records
        total = await File.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.FileScalarFieldKeys'],
        *,
        where: Optional['types.FileWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.FileAvgAggregateInput'] = None,
        sum: Optional['types.FileSumAggregateInput'] = None,
        min: Optional['types.FileMinAggregateInput'] = None,
        max: Optional['types.FileMaxAggregateInput'] = None,
        having: Optional['types.FileScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.FileCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.FileScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.FileScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.FileGroupByOutput']:
        """Group File records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar File fields to group records by
        where
            File filter to select records
        take
            Limit the maximum number of File records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.FileGroupByOutput]
            A list of dictionaries representing the File record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group File records by createdAt values
        # and count how many records are in each group
        results = await File.prisma().group_by(
            ['createdAt'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class GeneratedContentActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model


    async def create(
        self,
        data: types.GeneratedContentCreateInput,
        include: Optional[types.GeneratedContentInclude] = None
    ) -> _PrismaModelT:
        """Create a new GeneratedContent record.

        Parameters
        ----------
        data
            GeneratedContent record data
        include
            Specifies which relations should be loaded on the returned GeneratedContent model

        Returns
        -------
        prisma.models.GeneratedContent
            The created GeneratedContent record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a GeneratedContent record from just the required fields
        generatedcontent = await GeneratedContent.prisma().create(
            data={
                # data to create a GeneratedContent record
                'type': enums.ContentType.CHAT,
                'title': 'hgjcghfbi',
                'content': 'icadbcehj',
                'userId': 'jchciaee',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.GeneratedContentCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple GeneratedContent records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of GeneratedContent record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await GeneratedContent.prisma().create_many(
            data=[
                {
                    # data to create a GeneratedContent record
                    'type': enums.ContentType.CHAT,
                    'title': 'deeificjd',
                    'content': 'bbcbhebbda',
                    'userId': 'bejfijgcfb',
                },
                {
                    # data to create a GeneratedContent record
                    'type': enums.ContentType.CHAT,
                    'title': 'caifcbgii',
                    'content': 'igaibbfgj',
                    'userId': 'bggajdcbbi',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.GeneratedContentWhereUniqueInput,
        include: Optional[types.GeneratedContentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single GeneratedContent record.

        Parameters
        ----------
        where
            GeneratedContent filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned GeneratedContent model

        Returns
        -------
        prisma.models.GeneratedContent
            The deleted GeneratedContent record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        generatedcontent = await GeneratedContent.prisma().delete(
            where={
                'id': 'fcfhgbjed',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.GeneratedContentWhereUniqueInput,
        include: Optional[types.GeneratedContentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique GeneratedContent record.

        Parameters
        ----------
        where
            GeneratedContent filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned GeneratedContent model

        Returns
        -------
        prisma.models.GeneratedContent
            The found GeneratedContent record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        generatedcontent = await GeneratedContent.prisma().find_unique(
            where={
                'id': 'hdgcajhjg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.GeneratedContentWhereUniqueInput,
        include: Optional[types.GeneratedContentInclude] = None
    ) -> _PrismaModelT:
        """Find a unique GeneratedContent record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            GeneratedContent filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned GeneratedContent model

        Returns
        -------
        prisma.models.GeneratedContent
            The found GeneratedContent record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        generatedcontent = await GeneratedContent.prisma().find_unique_or_raise(
            where={
                'id': 'ejdjahicb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GeneratedContentWhereInput] = None,
        cursor: Optional[types.GeneratedContentWhereUniqueInput] = None,
        include: Optional[types.GeneratedContentInclude] = None,
        order: Optional[Union[types.GeneratedContentOrderByInput, List[types.GeneratedContentOrderByInput]]] = None,
        distinct: Optional[List[types.GeneratedContentScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple GeneratedContent records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of GeneratedContent records returned
        skip
            Ignore the first N results
        where
            GeneratedContent filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned GeneratedContent model
        order
            Order the returned GeneratedContent records by any field
        distinct
            Filter GeneratedContent records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.GeneratedContent]
            The list of all GeneratedContent records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 GeneratedContent records
        generatedcontents = await GeneratedContent.prisma().find_many(take=10)

        # find the first 5 GeneratedContent records ordered by the id field
        generatedcontents = await GeneratedContent.prisma().find_many(
            take=5,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.GeneratedContentWhereInput] = None,
        cursor: Optional[types.GeneratedContentWhereUniqueInput] = None,
        include: Optional[types.GeneratedContentInclude] = None,
        order: Optional[Union[types.GeneratedContentOrderByInput, List[types.GeneratedContentOrderByInput]]] = None,
        distinct: Optional[List[types.GeneratedContentScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single GeneratedContent record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            GeneratedContent filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned GeneratedContent model
        order
            Order the returned GeneratedContent records by any field
        distinct
            Filter GeneratedContent records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.GeneratedContent
            The first GeneratedContent record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second GeneratedContent record ordered by the type field
        generatedcontent = await GeneratedContent.prisma().find_first(
            skip=1,
            order={
                'type': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.GeneratedContentWhereInput] = None,
        cursor: Optional[types.GeneratedContentWhereUniqueInput] = None,
        include: Optional[types.GeneratedContentInclude] = None,
        order: Optional[Union[types.GeneratedContentOrderByInput, List[types.GeneratedContentOrderByInput]]] = None,
        distinct: Optional[List[types.GeneratedContentScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single GeneratedContent record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            GeneratedContent filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned GeneratedContent model
        order
            Order the returned GeneratedContent records by any field
        distinct
            Filter GeneratedContent records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.GeneratedContent
            The first GeneratedContent record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second GeneratedContent record ordered by the isPublic field
        generatedcontent = await GeneratedContent.prisma().find_first_or_raise(
            skip=1,
            order={
                'isPublic': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.GeneratedContentUpdateInput,
        where: types.GeneratedContentWhereUniqueInput,
        include: Optional[types.GeneratedContentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single GeneratedContent record.

        Parameters
        ----------
        data
            GeneratedContent record data specifying what to update
        where
            GeneratedContent filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned GeneratedContent model

        Returns
        -------
        prisma.models.GeneratedContent
            The updated GeneratedContent record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        generatedcontent = await GeneratedContent.prisma().update(
            where={
                'id': 'gdjgigfgc',
            },
            data={
                # data to update the GeneratedContent record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.GeneratedContentWhereUniqueInput,
        data: types.GeneratedContentUpsertInput,
        include: Optional[types.GeneratedContentInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            GeneratedContent filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned GeneratedContent model

        Returns
        -------
        prisma.models.GeneratedContent
            The created or updated GeneratedContent record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        generatedcontent = await GeneratedContent.prisma().upsert(
            where={
                'id': 'gfeaahdeh',
            },
            data={
                'create': {
                    'id': 'gfeaahdeh',
                    'type': enums.ContentType.CHAT,
                    'title': 'caifcbgii',
                    'content': 'igaibbfgj',
                    'userId': 'bggajdcbbi',
                },
                'update': {
                    'type': enums.ContentType.CHAT,
                    'title': 'caifcbgii',
                    'content': 'igaibbfgj',
                    'userId': 'bggajdcbbi',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.GeneratedContentUpdateManyMutationInput,
        where: types.GeneratedContentWhereInput,
    ) -> int:
        """Update multiple GeneratedContent records

        Parameters
        ----------
        data
            GeneratedContent data to update the selected GeneratedContent records to
        where
            Filter to select the GeneratedContent records to update

        Returns
        -------
        int
            The total number of GeneratedContent records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all GeneratedContent records
        total = await GeneratedContent.prisma().update_many(
            data={
                'title': 'bjafcgbffc'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GeneratedContentWhereInput] = None,
        cursor: Optional[types.GeneratedContentWhereUniqueInput] = None,
    ) -> int:
        """Count the number of GeneratedContent records present in the database

        Parameters
        ----------
        select
            Select the GeneratedContent fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            GeneratedContent filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.GeneratedContentCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await GeneratedContent.prisma().count()

        # results: prisma.types.GeneratedContentCountAggregateOutput
        results = await GeneratedContent.prisma().count(
            select={
                '_all': True,
                'filename': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.GeneratedContentCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GeneratedContentWhereInput] = None,
        cursor: Optional[types.GeneratedContentWhereUniqueInput] = None,
    ) -> types.GeneratedContentCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.GeneratedContentCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GeneratedContentWhereInput] = None,
        cursor: Optional[types.GeneratedContentWhereUniqueInput] = None,
    ) -> Union[int, types.GeneratedContentCountAggregateOutput]:
        """Count the number of GeneratedContent records present in the database

        Parameters
        ----------
        select
            Select the GeneratedContent fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            GeneratedContent filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.GeneratedContentCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await GeneratedContent.prisma().count()

        # results: prisma.types.GeneratedContentCountAggregateOutput
        results = await GeneratedContent.prisma().count(
            select={
                '_all': True,
                'prompt': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.GeneratedContentCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.GeneratedContentWhereInput] = None
    ) -> int:
        """Delete multiple GeneratedContent records.

        Parameters
        ----------
        where
            Optional GeneratedContent filter to find the records to be deleted

        Returns
        -------
        int
            The total number of GeneratedContent records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all GeneratedContent records
        total = await GeneratedContent.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.GeneratedContentScalarFieldKeys'],
        *,
        where: Optional['types.GeneratedContentWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.GeneratedContentAvgAggregateInput'] = None,
        sum: Optional['types.GeneratedContentSumAggregateInput'] = None,
        min: Optional['types.GeneratedContentMinAggregateInput'] = None,
        max: Optional['types.GeneratedContentMaxAggregateInput'] = None,
        having: Optional['types.GeneratedContentScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.GeneratedContentCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.GeneratedContentScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.GeneratedContentScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.GeneratedContentGroupByOutput']:
        """Group GeneratedContent records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar GeneratedContent fields to group records by
        where
            GeneratedContent filter to select records
        take
            Limit the maximum number of GeneratedContent records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.GeneratedContentGroupByOutput]
            A list of dictionaries representing the GeneratedContent record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group GeneratedContent records by content values
        # and count how many records are in each group
        results = await GeneratedContent.prisma().group_by(
            ['content'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models