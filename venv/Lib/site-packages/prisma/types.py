# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
            },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _ContentTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.ContentType']]


class _ContentTypeListFilterHasInput(TypedDict):
    has: 'enums.ContentType'


class _ContentTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.ContentType']


class _ContentTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.ContentType']


class _ContentTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


ContentTypeListFilter = Union[
    _ContentTypeListFilterHasInput,
    _ContentTypeListFilterEqualsInput,
    _ContentTypeListFilterHasSomeInput,
    _ContentTypeListFilterIsEmptyInput,
    _ContentTypeListFilterHasEveryInput,
]


class _ContentTypeListUpdateSet(TypedDict):
    set: List['enums.ContentType']


class _ContentTypeListUpdatePush(TypedDict):
    push: List['enums.ContentType']


ContentTypeListUpdate = Union[
    List['enums.ContentType'],
    _ContentTypeListUpdateSet,
    _ContentTypeListUpdatePush,
]

class _RoleListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.Role']]


class _RoleListFilterHasInput(TypedDict):
    has: 'enums.Role'


class _RoleListFilterHasEveryInput(TypedDict):
    has_every: List['enums.Role']


class _RoleListFilterHasSomeInput(TypedDict):
    has_some: List['enums.Role']


class _RoleListFilterIsEmptyInput(TypedDict):
    is_empty: bool


RoleListFilter = Union[
    _RoleListFilterHasInput,
    _RoleListFilterEqualsInput,
    _RoleListFilterHasSomeInput,
    _RoleListFilterIsEmptyInput,
    _RoleListFilterHasEveryInput,
]


class _RoleListUpdateSet(TypedDict):
    set: List['enums.Role']


class _RoleListUpdatePush(TypedDict):
    push: List['enums.Role']


RoleListUpdate = Union[
    List['enums.Role'],
    _RoleListUpdateSet,
    _RoleListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    name: Optional[_str]
    apiKey: Optional[_str]
    modelName: Optional[_str]
    isVerified: _bool
    verifiedAt: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    role: 'enums.Role'
    stories: 'StoryCreateManyNestedWithoutRelationsInput'
    chatMessages: 'ChatMessageCreateManyNestedWithoutRelationsInput'
    files: 'FileCreateManyNestedWithoutRelationsInput'
    contents: 'GeneratedContentCreateManyNestedWithoutRelationsInput'
    emailVerified: _bool


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    name: Optional[_str]
    apiKey: Optional[_str]
    modelName: Optional[_str]
    isVerified: _bool
    verifiedAt: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    role: 'enums.Role'
    emailVerified: _bool


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    password: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    email: _str
    password: _str
    name: Optional[_str]
    apiKey: Optional[_str]
    modelName: Optional[_str]
    isVerified: _bool
    verifiedAt: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    role: 'enums.Role'
    stories: 'StoryUpdateManyWithoutRelationsInput'
    chatMessages: 'ChatMessageUpdateManyWithoutRelationsInput'
    files: 'FileUpdateManyWithoutRelationsInput'
    contents: 'GeneratedContentUpdateManyWithoutRelationsInput'
    emailVerified: _bool


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    email: _str
    password: _str
    name: Optional[_str]
    apiKey: Optional[_str]
    modelName: Optional[_str]
    isVerified: _bool
    verifiedAt: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    role: 'enums.Role'
    emailVerified: _bool


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_apiKey_OrderByInput = TypedDict(
    '_User_apiKey_OrderByInput',
    {
        'apiKey': 'SortOrder',
    },
    total=True
)

_User_modelName_OrderByInput = TypedDict(
    '_User_modelName_OrderByInput',
    {
        'modelName': 'SortOrder',
    },
    total=True
)

_User_isVerified_OrderByInput = TypedDict(
    '_User_isVerified_OrderByInput',
    {
        'isVerified': 'SortOrder',
    },
    total=True
)

_User_verifiedAt_OrderByInput = TypedDict(
    '_User_verifiedAt_OrderByInput',
    {
        'verifiedAt': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_User_role_OrderByInput = TypedDict(
    '_User_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_User_emailVerified_OrderByInput = TypedDict(
    '_User_emailVerified_OrderByInput',
    {
        'emailVerified': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_password_OrderByInput',
    '_User_name_OrderByInput',
    '_User_apiKey_OrderByInput',
    '_User_modelName_OrderByInput',
    '_User_isVerified_OrderByInput',
    '_User_verifiedAt_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
    '_User_role_OrderByInput',
    '_User_emailVerified_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    stories: Union[bool, 'FindManyStoryArgsFromUser']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromUser']
    files: Union[bool, 'FindManyFileArgsFromUser']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    stories: Union[bool, 'FindManyStoryArgsFromUserRecursive1']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromUserRecursive1']
    files: Union[bool, 'FindManyFileArgsFromUserRecursive1']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    stories: Union[bool, 'FindManyStoryArgsFromUserRecursive2']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromUserRecursive2']
    files: Union[bool, 'FindManyFileArgsFromUserRecursive2']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    stories: Union[bool, 'FindManyStoryArgsFromUserRecursive3']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromUserRecursive3']
    files: Union[bool, 'FindManyFileArgsFromUserRecursive3']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    stories: Union[bool, 'FindManyStoryArgsFromUserRecursive4']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromUserRecursive4']
    files: Union[bool, 'FindManyFileArgsFromUserRecursive4']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class StoryIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class StoryIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class StoryIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class StoryIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class StoryIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class StoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'StoryIncludeFromStoryRecursive1'


class StoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'StoryIncludeFromStoryRecursive2'


class StoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'StoryIncludeFromStoryRecursive3'


class StoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'StoryIncludeFromStoryRecursive4'


class StoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyStoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive1'


class FindManyStoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive2'


class FindManyStoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive3'


class FindManyStoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive4'


class FindManyStoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    
    

class ChatMessageIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class ChatMessageIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class ChatMessageIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class ChatMessageIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class ChatMessageIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ChatMessageArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class ChatMessageArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class ChatMessageArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class ChatMessageArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class ChatMessageArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyChatMessageArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class FindManyChatMessageArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class FindManyChatMessageArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class FindManyChatMessageArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class FindManyChatMessageArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    
    

class FileIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class FileIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class FileIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class FileIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class FileIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class FileArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'FileIncludeFromFileRecursive1'


class FileArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'FileIncludeFromFileRecursive2'


class FileArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'FileIncludeFromFileRecursive3'


class FileArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'FileIncludeFromFileRecursive4'


class FileArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyFileArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive1'


class FindManyFileArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive2'


class FindManyFileArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive3'


class FindManyFileArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive4'


class FindManyFileArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    
    

class GeneratedContentIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class GeneratedContentIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class GeneratedContentIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class GeneratedContentIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class GeneratedContentIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class GeneratedContentArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive1'


class GeneratedContentArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive2'


class GeneratedContentArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive3'


class GeneratedContentArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive4'


class GeneratedContentArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyGeneratedContentArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive1'


class FindManyGeneratedContentArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive2'


class FindManyGeneratedContentArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive3'


class FindManyGeneratedContentArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive4'


class FindManyGeneratedContentArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    apiKey: Union[None, _str, 'types.StringFilter']
    modelName: Union[None, _str, 'types.StringFilter']
    isVerified: Union[_bool, 'types.BooleanFilter']
    verifiedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    role: 'enums.Role'
    stories: 'StoryListRelationFilter'
    chatMessages: 'ChatMessageListRelationFilter'
    files: 'FileListRelationFilter'
    contents: 'GeneratedContentListRelationFilter'
    emailVerified: Union[_bool, 'types.BooleanFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    apiKey: Union[None, _str, 'types.StringFilter']
    modelName: Union[None, _str, 'types.StringFilter']
    isVerified: Union[_bool, 'types.BooleanFilter']
    verifiedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    role: 'enums.Role'
    stories: 'StoryListRelationFilter'
    chatMessages: 'ChatMessageListRelationFilter'
    files: 'FileListRelationFilter'
    contents: 'GeneratedContentListRelationFilter'
    emailVerified: Union[_bool, 'types.BooleanFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    apiKey: Union[None, _str, 'types.StringFilter']
    modelName: Union[None, _str, 'types.StringFilter']
    isVerified: Union[_bool, 'types.BooleanFilter']
    verifiedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    role: 'enums.Role'
    stories: 'StoryListRelationFilter'
    chatMessages: 'ChatMessageListRelationFilter'
    files: 'FileListRelationFilter'
    contents: 'GeneratedContentListRelationFilter'
    emailVerified: Union[_bool, 'types.BooleanFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    apiKey: Union[None, _str, 'types.StringFilter']
    modelName: Union[None, _str, 'types.StringFilter']
    isVerified: Union[_bool, 'types.BooleanFilter']
    verifiedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    role: 'enums.Role'
    stories: 'StoryListRelationFilter'
    chatMessages: 'ChatMessageListRelationFilter'
    files: 'FileListRelationFilter'
    contents: 'GeneratedContentListRelationFilter'
    emailVerified: Union[_bool, 'types.BooleanFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    apiKey: Union[None, _str, 'types.StringFilter']
    modelName: Union[None, _str, 'types.StringFilter']
    isVerified: Union[_bool, 'types.BooleanFilter']
    verifiedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    role: 'enums.Role'
    stories: 'StoryListRelationFilter'
    chatMessages: 'ChatMessageListRelationFilter'
    files: 'FileListRelationFilter'
    contents: 'GeneratedContentListRelationFilter'
    emailVerified: Union[_bool, 'types.BooleanFilter']



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    apiKey: Union[_str, 'types.StringWithAggregatesFilter']
    modelName: Union[_str, 'types.StringWithAggregatesFilter']
    isVerified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    verifiedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    role: 'enums.Role'
    emailVerified: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    apiKey: Union[_str, 'types.StringWithAggregatesFilter']
    modelName: Union[_str, 'types.StringWithAggregatesFilter']
    isVerified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    verifiedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    role: 'enums.Role'
    emailVerified: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    apiKey: Union[_str, 'types.StringWithAggregatesFilter']
    modelName: Union[_str, 'types.StringWithAggregatesFilter']
    isVerified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    verifiedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    role: 'enums.Role'
    emailVerified: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    apiKey: Union[_str, 'types.StringWithAggregatesFilter']
    modelName: Union[_str, 'types.StringWithAggregatesFilter']
    isVerified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    verifiedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    role: 'enums.Role'
    emailVerified: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    apiKey: Union[_str, 'types.StringWithAggregatesFilter']
    modelName: Union[_str, 'types.StringWithAggregatesFilter']
    isVerified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    verifiedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    role: 'enums.Role'
    emailVerified: Union[_bool, 'types.BooleanWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    email: _str
    password: _str
    name: _str
    apiKey: _str
    modelName: _str
    isVerified: _bool
    verifiedAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    role: 'enums.Role'
    emailVerified: _bool
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    email: _str
    password: _str
    name: _str
    apiKey: _str
    modelName: _str
    isVerified: _bool
    verifiedAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    role: 'enums.Role'
    emailVerified: _bool


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    password: bool
    name: bool
    apiKey: bool
    modelName: bool
    isVerified: bool
    verifiedAt: bool
    createdAt: bool
    updatedAt: bool
    role: bool
    emailVerified: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    password: bool
    name: bool
    apiKey: bool
    modelName: bool
    isVerified: bool
    verifiedAt: bool
    createdAt: bool
    updatedAt: bool
    role: bool
    emailVerified: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'password': bool,
        'name': bool,
        'apiKey': bool,
        'modelName': bool,
        'isVerified': bool,
        'verifiedAt': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'role': bool,
        'emailVerified': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'password': int,
        'name': int,
        'apiKey': int,
        'modelName': int,
        'isVerified': int,
        'verifiedAt': int,
        'createdAt': int,
        'updatedAt': int,
        'role': int,
        'emailVerified': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'password',
    'name',
    'apiKey',
    'modelName',
    'isVerified',
    'verifiedAt',
    'createdAt',
    'updatedAt',
    'role',
    'stories',
    'chatMessages',
    'files',
    'contents',
    'emailVerified',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'password',
    'name',
    'apiKey',
    'modelName',
    'isVerified',
    'verifiedAt',
    'createdAt',
    'updatedAt',
    'role',
    'emailVerified',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'stories',
        'chatMessages',
        'files',
        'contents',
    ]

# Story types

class StoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Story create method"""
    id: _str
    userId: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class StoryCreateInput(StoryOptionalCreateInput):
    """Required arguments to the Story create method"""
    model: _str
    title: _str
    content: _str
    prompt: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class StoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Story create method, without relations"""
    id: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class StoryCreateWithoutRelationsInput(StoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the Story create method, without relations"""
    model: _str
    title: _str
    content: _str
    prompt: _str

class StoryConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'StoryCreateWithoutRelationsInput'
    where: 'StoryWhereUniqueInput'

class StoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'StoryCreateWithoutRelationsInput'
    connect: 'StoryWhereUniqueInput'
    connect_or_create: 'StoryConnectOrCreateWithoutRelationsInput'


class StoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['StoryCreateWithoutRelationsInput', List['StoryCreateWithoutRelationsInput']]
    connect: Union['StoryWhereUniqueInput', List['StoryWhereUniqueInput']]
    connect_or_create: Union['StoryConnectOrCreateWithoutRelationsInput', List['StoryConnectOrCreateWithoutRelationsInput']]

_StoryWhereUnique_id_Input = TypedDict(
    '_StoryWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

StoryWhereUniqueInput = _StoryWhereUnique_id_Input


class StoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    model: _str
    title: _str
    content: _str
    prompt: _str
    user: 'UserUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class StoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    model: _str
    title: _str
    content: _str
    prompt: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class StoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['StoryCreateWithoutRelationsInput']
    connect: List['StoryWhereUniqueInput']
    connect_or_create: List['StoryConnectOrCreateWithoutRelationsInput']
    set: List['StoryWhereUniqueInput']
    disconnect: List['StoryWhereUniqueInput']
    delete: List['StoryWhereUniqueInput']

    # TODO
    # update: List['StoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['StoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['StoryScalarWhereInput']
    # upsert: List['StoryUpserteWithWhereUniqueWithoutRelationsInput']


class StoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'StoryCreateWithoutRelationsInput'
    connect: 'StoryWhereUniqueInput'
    connect_or_create: 'StoryConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'StoryUpdateInput'
    # upsert: 'StoryUpsertWithoutRelationsInput'


class StoryUpsertInput(TypedDict):
    create: 'StoryCreateInput'
    update: 'StoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Story_id_OrderByInput = TypedDict(
    '_Story_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Story_model_OrderByInput = TypedDict(
    '_Story_model_OrderByInput',
    {
        'model': 'SortOrder',
    },
    total=True
)

_Story_title_OrderByInput = TypedDict(
    '_Story_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Story_content_OrderByInput = TypedDict(
    '_Story_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Story_prompt_OrderByInput = TypedDict(
    '_Story_prompt_OrderByInput',
    {
        'prompt': 'SortOrder',
    },
    total=True
)

_Story_userId_OrderByInput = TypedDict(
    '_Story_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Story_createdAt_OrderByInput = TypedDict(
    '_Story_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Story_updatedAt_OrderByInput = TypedDict(
    '_Story_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

StoryOrderByInput = Union[
    '_Story_id_OrderByInput',
    '_Story_model_OrderByInput',
    '_Story_title_OrderByInput',
    '_Story_content_OrderByInput',
    '_Story_prompt_OrderByInput',
    '_Story_userId_OrderByInput',
    '_Story_createdAt_OrderByInput',
    '_Story_updatedAt_OrderByInput',
]



# recursive Story types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

StoryRelationFilter = TypedDict(
    'StoryRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class StoryListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class StoryInclude(TypedDict, total=False):
    """Story relational arguments"""
    user: Union[bool, 'UserArgsFromStory']


    

class UserIncludeFromStory(TypedDict, total=False):
    """Relational arguments for Story"""
    stories: Union[bool, 'FindManyStoryArgsFromStoryRecursive1']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromStoryRecursive1']
    files: Union[bool, 'FindManyFileArgsFromStoryRecursive1']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromStoryRecursive1']


class UserIncludeFromStoryRecursive1(TypedDict, total=False):
    """Relational arguments for Story"""
    stories: Union[bool, 'FindManyStoryArgsFromStoryRecursive2']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromStoryRecursive2']
    files: Union[bool, 'FindManyFileArgsFromStoryRecursive2']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromStoryRecursive2']


class UserIncludeFromStoryRecursive2(TypedDict, total=False):
    """Relational arguments for Story"""
    stories: Union[bool, 'FindManyStoryArgsFromStoryRecursive3']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromStoryRecursive3']
    files: Union[bool, 'FindManyFileArgsFromStoryRecursive3']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromStoryRecursive3']


class UserIncludeFromStoryRecursive3(TypedDict, total=False):
    """Relational arguments for Story"""
    stories: Union[bool, 'FindManyStoryArgsFromStoryRecursive4']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromStoryRecursive4']
    files: Union[bool, 'FindManyFileArgsFromStoryRecursive4']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromStoryRecursive4']


class UserIncludeFromStoryRecursive4(TypedDict, total=False):
    """Relational arguments for Story"""

    

class UserArgsFromStory(TypedDict, total=False):
    """Arguments for Story"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromStoryRecursive1(TypedDict, total=False):
    """Arguments for Story"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromStoryRecursive2(TypedDict, total=False):
    """Arguments for Story"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromStoryRecursive3(TypedDict, total=False):
    """Arguments for Story"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromStoryRecursive4(TypedDict, total=False):
    """Arguments for Story"""
    
    

class FindManyUserArgsFromStory(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromStoryRecursive1(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromStoryRecursive2(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromStoryRecursive3(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromStoryRecursive4(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class StoryIncludeFromStory(TypedDict, total=False):
    """Relational arguments for Story"""
    user: Union[bool, 'UserArgsFromStoryRecursive1']


class StoryIncludeFromStoryRecursive1(TypedDict, total=False):
    """Relational arguments for Story"""
    user: Union[bool, 'UserArgsFromStoryRecursive2']


class StoryIncludeFromStoryRecursive2(TypedDict, total=False):
    """Relational arguments for Story"""
    user: Union[bool, 'UserArgsFromStoryRecursive3']


class StoryIncludeFromStoryRecursive3(TypedDict, total=False):
    """Relational arguments for Story"""
    user: Union[bool, 'UserArgsFromStoryRecursive4']


class StoryIncludeFromStoryRecursive4(TypedDict, total=False):
    """Relational arguments for Story"""

    

class StoryArgsFromStory(TypedDict, total=False):
    """Arguments for Story"""
    include: 'StoryIncludeFromStoryRecursive1'


class StoryArgsFromStoryRecursive1(TypedDict, total=False):
    """Arguments for Story"""
    include: 'StoryIncludeFromStoryRecursive2'


class StoryArgsFromStoryRecursive2(TypedDict, total=False):
    """Arguments for Story"""
    include: 'StoryIncludeFromStoryRecursive3'


class StoryArgsFromStoryRecursive3(TypedDict, total=False):
    """Arguments for Story"""
    include: 'StoryIncludeFromStoryRecursive4'


class StoryArgsFromStoryRecursive4(TypedDict, total=False):
    """Arguments for Story"""
    
    

class FindManyStoryArgsFromStory(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive1'


class FindManyStoryArgsFromStoryRecursive1(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive2'


class FindManyStoryArgsFromStoryRecursive2(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive3'


class FindManyStoryArgsFromStoryRecursive3(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive4'


class FindManyStoryArgsFromStoryRecursive4(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    
    

class ChatMessageIncludeFromStory(TypedDict, total=False):
    """Relational arguments for Story"""
    user: Union[bool, 'UserArgsFromStoryRecursive1']


class ChatMessageIncludeFromStoryRecursive1(TypedDict, total=False):
    """Relational arguments for Story"""
    user: Union[bool, 'UserArgsFromStoryRecursive2']


class ChatMessageIncludeFromStoryRecursive2(TypedDict, total=False):
    """Relational arguments for Story"""
    user: Union[bool, 'UserArgsFromStoryRecursive3']


class ChatMessageIncludeFromStoryRecursive3(TypedDict, total=False):
    """Relational arguments for Story"""
    user: Union[bool, 'UserArgsFromStoryRecursive4']


class ChatMessageIncludeFromStoryRecursive4(TypedDict, total=False):
    """Relational arguments for Story"""

    

class ChatMessageArgsFromStory(TypedDict, total=False):
    """Arguments for Story"""
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class ChatMessageArgsFromStoryRecursive1(TypedDict, total=False):
    """Arguments for Story"""
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class ChatMessageArgsFromStoryRecursive2(TypedDict, total=False):
    """Arguments for Story"""
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class ChatMessageArgsFromStoryRecursive3(TypedDict, total=False):
    """Arguments for Story"""
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class ChatMessageArgsFromStoryRecursive4(TypedDict, total=False):
    """Arguments for Story"""
    
    

class FindManyChatMessageArgsFromStory(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class FindManyChatMessageArgsFromStoryRecursive1(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class FindManyChatMessageArgsFromStoryRecursive2(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class FindManyChatMessageArgsFromStoryRecursive3(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class FindManyChatMessageArgsFromStoryRecursive4(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    
    

class FileIncludeFromStory(TypedDict, total=False):
    """Relational arguments for Story"""
    user: Union[bool, 'UserArgsFromStoryRecursive1']


class FileIncludeFromStoryRecursive1(TypedDict, total=False):
    """Relational arguments for Story"""
    user: Union[bool, 'UserArgsFromStoryRecursive2']


class FileIncludeFromStoryRecursive2(TypedDict, total=False):
    """Relational arguments for Story"""
    user: Union[bool, 'UserArgsFromStoryRecursive3']


class FileIncludeFromStoryRecursive3(TypedDict, total=False):
    """Relational arguments for Story"""
    user: Union[bool, 'UserArgsFromStoryRecursive4']


class FileIncludeFromStoryRecursive4(TypedDict, total=False):
    """Relational arguments for Story"""

    

class FileArgsFromStory(TypedDict, total=False):
    """Arguments for Story"""
    include: 'FileIncludeFromFileRecursive1'


class FileArgsFromStoryRecursive1(TypedDict, total=False):
    """Arguments for Story"""
    include: 'FileIncludeFromFileRecursive2'


class FileArgsFromStoryRecursive2(TypedDict, total=False):
    """Arguments for Story"""
    include: 'FileIncludeFromFileRecursive3'


class FileArgsFromStoryRecursive3(TypedDict, total=False):
    """Arguments for Story"""
    include: 'FileIncludeFromFileRecursive4'


class FileArgsFromStoryRecursive4(TypedDict, total=False):
    """Arguments for Story"""
    
    

class FindManyFileArgsFromStory(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive1'


class FindManyFileArgsFromStoryRecursive1(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive2'


class FindManyFileArgsFromStoryRecursive2(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive3'


class FindManyFileArgsFromStoryRecursive3(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive4'


class FindManyFileArgsFromStoryRecursive4(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    
    

class GeneratedContentIncludeFromStory(TypedDict, total=False):
    """Relational arguments for Story"""
    user: Union[bool, 'UserArgsFromStoryRecursive1']


class GeneratedContentIncludeFromStoryRecursive1(TypedDict, total=False):
    """Relational arguments for Story"""
    user: Union[bool, 'UserArgsFromStoryRecursive2']


class GeneratedContentIncludeFromStoryRecursive2(TypedDict, total=False):
    """Relational arguments for Story"""
    user: Union[bool, 'UserArgsFromStoryRecursive3']


class GeneratedContentIncludeFromStoryRecursive3(TypedDict, total=False):
    """Relational arguments for Story"""
    user: Union[bool, 'UserArgsFromStoryRecursive4']


class GeneratedContentIncludeFromStoryRecursive4(TypedDict, total=False):
    """Relational arguments for Story"""

    

class GeneratedContentArgsFromStory(TypedDict, total=False):
    """Arguments for Story"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive1'


class GeneratedContentArgsFromStoryRecursive1(TypedDict, total=False):
    """Arguments for Story"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive2'


class GeneratedContentArgsFromStoryRecursive2(TypedDict, total=False):
    """Arguments for Story"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive3'


class GeneratedContentArgsFromStoryRecursive3(TypedDict, total=False):
    """Arguments for Story"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive4'


class GeneratedContentArgsFromStoryRecursive4(TypedDict, total=False):
    """Arguments for Story"""
    
    

class FindManyGeneratedContentArgsFromStory(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive1'


class FindManyGeneratedContentArgsFromStoryRecursive1(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive2'


class FindManyGeneratedContentArgsFromStoryRecursive2(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive3'


class FindManyGeneratedContentArgsFromStoryRecursive3(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive4'


class FindManyGeneratedContentArgsFromStoryRecursive4(TypedDict, total=False):
    """Arguments for Story"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    


FindManyStoryArgs = FindManyStoryArgsFromStory
FindFirstStoryArgs = FindManyStoryArgsFromStory


    

class StoryWhereInput(TypedDict, total=False):
    """Story arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    prompt: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['StoryWhereInputRecursive1', List['StoryWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['StoryWhereInputRecursive1']
    OR: List['StoryWhereInputRecursive1']
    NOT: List['StoryWhereInputRecursive1']


class StoryWhereInputRecursive1(TypedDict, total=False):
    """Story arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    prompt: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['StoryWhereInputRecursive2', List['StoryWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['StoryWhereInputRecursive2']
    OR: List['StoryWhereInputRecursive2']
    NOT: List['StoryWhereInputRecursive2']


class StoryWhereInputRecursive2(TypedDict, total=False):
    """Story arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    prompt: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['StoryWhereInputRecursive3', List['StoryWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['StoryWhereInputRecursive3']
    OR: List['StoryWhereInputRecursive3']
    NOT: List['StoryWhereInputRecursive3']


class StoryWhereInputRecursive3(TypedDict, total=False):
    """Story arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    prompt: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['StoryWhereInputRecursive4', List['StoryWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['StoryWhereInputRecursive4']
    OR: List['StoryWhereInputRecursive4']
    NOT: List['StoryWhereInputRecursive4']


class StoryWhereInputRecursive4(TypedDict, total=False):
    """Story arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    prompt: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Story types


    

class StoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Story arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    prompt: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['StoryScalarWhereWithAggregatesInputRecursive1']
    OR: List['StoryScalarWhereWithAggregatesInputRecursive1']
    NOT: List['StoryScalarWhereWithAggregatesInputRecursive1']


class StoryScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Story arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    prompt: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['StoryScalarWhereWithAggregatesInputRecursive2']
    OR: List['StoryScalarWhereWithAggregatesInputRecursive2']
    NOT: List['StoryScalarWhereWithAggregatesInputRecursive2']


class StoryScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Story arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    prompt: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['StoryScalarWhereWithAggregatesInputRecursive3']
    OR: List['StoryScalarWhereWithAggregatesInputRecursive3']
    NOT: List['StoryScalarWhereWithAggregatesInputRecursive3']


class StoryScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Story arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    prompt: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['StoryScalarWhereWithAggregatesInputRecursive4']
    OR: List['StoryScalarWhereWithAggregatesInputRecursive4']
    NOT: List['StoryScalarWhereWithAggregatesInputRecursive4']


class StoryScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Story arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    prompt: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class StoryGroupByOutput(TypedDict, total=False):
    id: _str
    model: _str
    title: _str
    content: _str
    prompt: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'StorySumAggregateOutput'
    _avg: 'StoryAvgAggregateOutput'
    _min: 'StoryMinAggregateOutput'
    _max: 'StoryMaxAggregateOutput'
    _count: 'StoryCountAggregateOutput'


class StoryAvgAggregateOutput(TypedDict, total=False):
    """Story output for aggregating averages"""


class StorySumAggregateOutput(TypedDict, total=False):
    """Story output for aggregating sums"""


class StoryScalarAggregateOutput(TypedDict, total=False):
    """Story output including scalar fields"""
    id: _str
    model: _str
    title: _str
    content: _str
    prompt: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


StoryMinAggregateOutput = StoryScalarAggregateOutput
StoryMaxAggregateOutput = StoryScalarAggregateOutput


class StoryMaxAggregateInput(TypedDict, total=False):
    """Story input for aggregating by max"""
    id: bool
    model: bool
    title: bool
    content: bool
    prompt: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class StoryMinAggregateInput(TypedDict, total=False):
    """Story input for aggregating by min"""
    id: bool
    model: bool
    title: bool
    content: bool
    prompt: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class StoryNumberAggregateInput(TypedDict, total=False):
    """Story input for aggregating numbers"""


StoryAvgAggregateInput = StoryNumberAggregateInput
StorySumAggregateInput = StoryNumberAggregateInput


StoryCountAggregateInput = TypedDict(
    'StoryCountAggregateInput',
    {
        'id': bool,
        'model': bool,
        'title': bool,
        'content': bool,
        'prompt': bool,
        'userId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

StoryCountAggregateOutput = TypedDict(
    'StoryCountAggregateOutput',
    {
        'id': int,
        'model': int,
        'title': int,
        'content': int,
        'prompt': int,
        'userId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


StoryKeys = Literal[
    'id',
    'model',
    'title',
    'content',
    'prompt',
    'userId',
    'user',
    'createdAt',
    'updatedAt',
]
StoryScalarFieldKeys = Literal[
    'id',
    'model',
    'title',
    'content',
    'prompt',
    'userId',
    'createdAt',
    'updatedAt',
]
StoryScalarFieldKeysT = TypeVar('StoryScalarFieldKeysT', bound=StoryScalarFieldKeys)

StoryRelationalFieldKeys = Literal[
        'user',
    ]

# ChatMessage types

class ChatMessageOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ChatMessage create method"""
    id: _str
    userId: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ChatMessageCreateInput(ChatMessageOptionalCreateInput):
    """Required arguments to the ChatMessage create method"""
    model: _str
    message: _str
    content: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ChatMessageOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ChatMessage create method, without relations"""
    id: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ChatMessageCreateWithoutRelationsInput(ChatMessageOptionalCreateWithoutRelationsInput):
    """Required arguments to the ChatMessage create method, without relations"""
    model: _str
    message: _str
    content: _str

class ChatMessageConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ChatMessageCreateWithoutRelationsInput'
    where: 'ChatMessageWhereUniqueInput'

class ChatMessageCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ChatMessageCreateWithoutRelationsInput'
    connect: 'ChatMessageWhereUniqueInput'
    connect_or_create: 'ChatMessageConnectOrCreateWithoutRelationsInput'


class ChatMessageCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ChatMessageCreateWithoutRelationsInput', List['ChatMessageCreateWithoutRelationsInput']]
    connect: Union['ChatMessageWhereUniqueInput', List['ChatMessageWhereUniqueInput']]
    connect_or_create: Union['ChatMessageConnectOrCreateWithoutRelationsInput', List['ChatMessageConnectOrCreateWithoutRelationsInput']]

_ChatMessageWhereUnique_id_Input = TypedDict(
    '_ChatMessageWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ChatMessageWhereUniqueInput = _ChatMessageWhereUnique_id_Input


class ChatMessageUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    model: _str
    message: _str
    content: _str
    user: 'UserUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ChatMessageUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    model: _str
    message: _str
    content: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ChatMessageUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ChatMessageCreateWithoutRelationsInput']
    connect: List['ChatMessageWhereUniqueInput']
    connect_or_create: List['ChatMessageConnectOrCreateWithoutRelationsInput']
    set: List['ChatMessageWhereUniqueInput']
    disconnect: List['ChatMessageWhereUniqueInput']
    delete: List['ChatMessageWhereUniqueInput']

    # TODO
    # update: List['ChatMessageUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ChatMessageUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ChatMessageScalarWhereInput']
    # upsert: List['ChatMessageUpserteWithWhereUniqueWithoutRelationsInput']


class ChatMessageUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ChatMessageCreateWithoutRelationsInput'
    connect: 'ChatMessageWhereUniqueInput'
    connect_or_create: 'ChatMessageConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ChatMessageUpdateInput'
    # upsert: 'ChatMessageUpsertWithoutRelationsInput'


class ChatMessageUpsertInput(TypedDict):
    create: 'ChatMessageCreateInput'
    update: 'ChatMessageUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ChatMessage_id_OrderByInput = TypedDict(
    '_ChatMessage_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ChatMessage_model_OrderByInput = TypedDict(
    '_ChatMessage_model_OrderByInput',
    {
        'model': 'SortOrder',
    },
    total=True
)

_ChatMessage_message_OrderByInput = TypedDict(
    '_ChatMessage_message_OrderByInput',
    {
        'message': 'SortOrder',
    },
    total=True
)

_ChatMessage_content_OrderByInput = TypedDict(
    '_ChatMessage_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_ChatMessage_userId_OrderByInput = TypedDict(
    '_ChatMessage_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_ChatMessage_createdAt_OrderByInput = TypedDict(
    '_ChatMessage_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_ChatMessage_updatedAt_OrderByInput = TypedDict(
    '_ChatMessage_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

ChatMessageOrderByInput = Union[
    '_ChatMessage_id_OrderByInput',
    '_ChatMessage_model_OrderByInput',
    '_ChatMessage_message_OrderByInput',
    '_ChatMessage_content_OrderByInput',
    '_ChatMessage_userId_OrderByInput',
    '_ChatMessage_createdAt_OrderByInput',
    '_ChatMessage_updatedAt_OrderByInput',
]



# recursive ChatMessage types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ChatMessageRelationFilter = TypedDict(
    'ChatMessageRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ChatMessageListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ChatMessageInclude(TypedDict, total=False):
    """ChatMessage relational arguments"""
    user: Union[bool, 'UserArgsFromChatMessage']


    

class UserIncludeFromChatMessage(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    stories: Union[bool, 'FindManyStoryArgsFromChatMessageRecursive1']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromChatMessageRecursive1']
    files: Union[bool, 'FindManyFileArgsFromChatMessageRecursive1']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromChatMessageRecursive1']


class UserIncludeFromChatMessageRecursive1(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    stories: Union[bool, 'FindManyStoryArgsFromChatMessageRecursive2']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromChatMessageRecursive2']
    files: Union[bool, 'FindManyFileArgsFromChatMessageRecursive2']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromChatMessageRecursive2']


class UserIncludeFromChatMessageRecursive2(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    stories: Union[bool, 'FindManyStoryArgsFromChatMessageRecursive3']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromChatMessageRecursive3']
    files: Union[bool, 'FindManyFileArgsFromChatMessageRecursive3']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromChatMessageRecursive3']


class UserIncludeFromChatMessageRecursive3(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    stories: Union[bool, 'FindManyStoryArgsFromChatMessageRecursive4']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromChatMessageRecursive4']
    files: Union[bool, 'FindManyFileArgsFromChatMessageRecursive4']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromChatMessageRecursive4']


class UserIncludeFromChatMessageRecursive4(TypedDict, total=False):
    """Relational arguments for ChatMessage"""

    

class UserArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    
    

class FindManyUserArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class StoryIncludeFromChatMessage(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive1']


class StoryIncludeFromChatMessageRecursive1(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive2']


class StoryIncludeFromChatMessageRecursive2(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive3']


class StoryIncludeFromChatMessageRecursive3(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive4']


class StoryIncludeFromChatMessageRecursive4(TypedDict, total=False):
    """Relational arguments for ChatMessage"""

    

class StoryArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'StoryIncludeFromStoryRecursive1'


class StoryArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'StoryIncludeFromStoryRecursive2'


class StoryArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'StoryIncludeFromStoryRecursive3'


class StoryArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'StoryIncludeFromStoryRecursive4'


class StoryArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    
    

class FindManyStoryArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive1'


class FindManyStoryArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive2'


class FindManyStoryArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive3'


class FindManyStoryArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive4'


class FindManyStoryArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    
    

class ChatMessageIncludeFromChatMessage(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive1']


class ChatMessageIncludeFromChatMessageRecursive1(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive2']


class ChatMessageIncludeFromChatMessageRecursive2(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive3']


class ChatMessageIncludeFromChatMessageRecursive3(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive4']


class ChatMessageIncludeFromChatMessageRecursive4(TypedDict, total=False):
    """Relational arguments for ChatMessage"""

    

class ChatMessageArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class ChatMessageArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class ChatMessageArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class ChatMessageArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class ChatMessageArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    
    

class FindManyChatMessageArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class FindManyChatMessageArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class FindManyChatMessageArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class FindManyChatMessageArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class FindManyChatMessageArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    
    

class FileIncludeFromChatMessage(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive1']


class FileIncludeFromChatMessageRecursive1(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive2']


class FileIncludeFromChatMessageRecursive2(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive3']


class FileIncludeFromChatMessageRecursive3(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive4']


class FileIncludeFromChatMessageRecursive4(TypedDict, total=False):
    """Relational arguments for ChatMessage"""

    

class FileArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'FileIncludeFromFileRecursive1'


class FileArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'FileIncludeFromFileRecursive2'


class FileArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'FileIncludeFromFileRecursive3'


class FileArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'FileIncludeFromFileRecursive4'


class FileArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    
    

class FindManyFileArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive1'


class FindManyFileArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive2'


class FindManyFileArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive3'


class FindManyFileArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive4'


class FindManyFileArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    
    

class GeneratedContentIncludeFromChatMessage(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive1']


class GeneratedContentIncludeFromChatMessageRecursive1(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive2']


class GeneratedContentIncludeFromChatMessageRecursive2(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive3']


class GeneratedContentIncludeFromChatMessageRecursive3(TypedDict, total=False):
    """Relational arguments for ChatMessage"""
    user: Union[bool, 'UserArgsFromChatMessageRecursive4']


class GeneratedContentIncludeFromChatMessageRecursive4(TypedDict, total=False):
    """Relational arguments for ChatMessage"""

    

class GeneratedContentArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive1'


class GeneratedContentArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive2'


class GeneratedContentArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive3'


class GeneratedContentArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive4'


class GeneratedContentArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    
    

class FindManyGeneratedContentArgsFromChatMessage(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive1'


class FindManyGeneratedContentArgsFromChatMessageRecursive1(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive2'


class FindManyGeneratedContentArgsFromChatMessageRecursive2(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive3'


class FindManyGeneratedContentArgsFromChatMessageRecursive3(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive4'


class FindManyGeneratedContentArgsFromChatMessageRecursive4(TypedDict, total=False):
    """Arguments for ChatMessage"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    


FindManyChatMessageArgs = FindManyChatMessageArgsFromChatMessage
FindFirstChatMessageArgs = FindManyChatMessageArgsFromChatMessage


    

class ChatMessageWhereInput(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ChatMessageWhereInputRecursive1', List['ChatMessageWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ChatMessageWhereInputRecursive1']
    OR: List['ChatMessageWhereInputRecursive1']
    NOT: List['ChatMessageWhereInputRecursive1']


class ChatMessageWhereInputRecursive1(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ChatMessageWhereInputRecursive2', List['ChatMessageWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ChatMessageWhereInputRecursive2']
    OR: List['ChatMessageWhereInputRecursive2']
    NOT: List['ChatMessageWhereInputRecursive2']


class ChatMessageWhereInputRecursive2(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ChatMessageWhereInputRecursive3', List['ChatMessageWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ChatMessageWhereInputRecursive3']
    OR: List['ChatMessageWhereInputRecursive3']
    NOT: List['ChatMessageWhereInputRecursive3']


class ChatMessageWhereInputRecursive3(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ChatMessageWhereInputRecursive4', List['ChatMessageWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ChatMessageWhereInputRecursive4']
    OR: List['ChatMessageWhereInputRecursive4']
    NOT: List['ChatMessageWhereInputRecursive4']


class ChatMessageWhereInputRecursive4(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate ChatMessage types


    

class ChatMessageScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChatMessageScalarWhereWithAggregatesInputRecursive1']
    OR: List['ChatMessageScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ChatMessageScalarWhereWithAggregatesInputRecursive1']


class ChatMessageScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChatMessageScalarWhereWithAggregatesInputRecursive2']
    OR: List['ChatMessageScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ChatMessageScalarWhereWithAggregatesInputRecursive2']


class ChatMessageScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChatMessageScalarWhereWithAggregatesInputRecursive3']
    OR: List['ChatMessageScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ChatMessageScalarWhereWithAggregatesInputRecursive3']


class ChatMessageScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ChatMessageScalarWhereWithAggregatesInputRecursive4']
    OR: List['ChatMessageScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ChatMessageScalarWhereWithAggregatesInputRecursive4']


class ChatMessageScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ChatMessage arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ChatMessageGroupByOutput(TypedDict, total=False):
    id: _str
    model: _str
    message: _str
    content: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'ChatMessageSumAggregateOutput'
    _avg: 'ChatMessageAvgAggregateOutput'
    _min: 'ChatMessageMinAggregateOutput'
    _max: 'ChatMessageMaxAggregateOutput'
    _count: 'ChatMessageCountAggregateOutput'


class ChatMessageAvgAggregateOutput(TypedDict, total=False):
    """ChatMessage output for aggregating averages"""


class ChatMessageSumAggregateOutput(TypedDict, total=False):
    """ChatMessage output for aggregating sums"""


class ChatMessageScalarAggregateOutput(TypedDict, total=False):
    """ChatMessage output including scalar fields"""
    id: _str
    model: _str
    message: _str
    content: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


ChatMessageMinAggregateOutput = ChatMessageScalarAggregateOutput
ChatMessageMaxAggregateOutput = ChatMessageScalarAggregateOutput


class ChatMessageMaxAggregateInput(TypedDict, total=False):
    """ChatMessage input for aggregating by max"""
    id: bool
    model: bool
    message: bool
    content: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class ChatMessageMinAggregateInput(TypedDict, total=False):
    """ChatMessage input for aggregating by min"""
    id: bool
    model: bool
    message: bool
    content: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class ChatMessageNumberAggregateInput(TypedDict, total=False):
    """ChatMessage input for aggregating numbers"""


ChatMessageAvgAggregateInput = ChatMessageNumberAggregateInput
ChatMessageSumAggregateInput = ChatMessageNumberAggregateInput


ChatMessageCountAggregateInput = TypedDict(
    'ChatMessageCountAggregateInput',
    {
        'id': bool,
        'model': bool,
        'message': bool,
        'content': bool,
        'userId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

ChatMessageCountAggregateOutput = TypedDict(
    'ChatMessageCountAggregateOutput',
    {
        'id': int,
        'model': int,
        'message': int,
        'content': int,
        'userId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


ChatMessageKeys = Literal[
    'id',
    'model',
    'message',
    'content',
    'userId',
    'user',
    'createdAt',
    'updatedAt',
]
ChatMessageScalarFieldKeys = Literal[
    'id',
    'model',
    'message',
    'content',
    'userId',
    'createdAt',
    'updatedAt',
]
ChatMessageScalarFieldKeysT = TypeVar('ChatMessageScalarFieldKeysT', bound=ChatMessageScalarFieldKeys)

ChatMessageRelationalFieldKeys = Literal[
        'user',
    ]

# File types

class FileOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the File create method"""
    id: _str
    userId: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class FileCreateInput(FileOptionalCreateInput):
    """Required arguments to the File create method"""
    model: _str
    filename: _str
    content: _str
    response: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class FileOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the File create method, without relations"""
    id: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class FileCreateWithoutRelationsInput(FileOptionalCreateWithoutRelationsInput):
    """Required arguments to the File create method, without relations"""
    model: _str
    filename: _str
    content: _str
    response: _str

class FileConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'FileCreateWithoutRelationsInput'
    where: 'FileWhereUniqueInput'

class FileCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'FileCreateWithoutRelationsInput'
    connect: 'FileWhereUniqueInput'
    connect_or_create: 'FileConnectOrCreateWithoutRelationsInput'


class FileCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['FileCreateWithoutRelationsInput', List['FileCreateWithoutRelationsInput']]
    connect: Union['FileWhereUniqueInput', List['FileWhereUniqueInput']]
    connect_or_create: Union['FileConnectOrCreateWithoutRelationsInput', List['FileConnectOrCreateWithoutRelationsInput']]

_FileWhereUnique_id_Input = TypedDict(
    '_FileWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

FileWhereUniqueInput = _FileWhereUnique_id_Input


class FileUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    model: _str
    filename: _str
    content: _str
    response: _str
    user: 'UserUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class FileUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    model: _str
    filename: _str
    content: _str
    response: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class FileUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['FileCreateWithoutRelationsInput']
    connect: List['FileWhereUniqueInput']
    connect_or_create: List['FileConnectOrCreateWithoutRelationsInput']
    set: List['FileWhereUniqueInput']
    disconnect: List['FileWhereUniqueInput']
    delete: List['FileWhereUniqueInput']

    # TODO
    # update: List['FileUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['FileUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['FileScalarWhereInput']
    # upsert: List['FileUpserteWithWhereUniqueWithoutRelationsInput']


class FileUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'FileCreateWithoutRelationsInput'
    connect: 'FileWhereUniqueInput'
    connect_or_create: 'FileConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'FileUpdateInput'
    # upsert: 'FileUpsertWithoutRelationsInput'


class FileUpsertInput(TypedDict):
    create: 'FileCreateInput'
    update: 'FileUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_File_id_OrderByInput = TypedDict(
    '_File_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_File_model_OrderByInput = TypedDict(
    '_File_model_OrderByInput',
    {
        'model': 'SortOrder',
    },
    total=True
)

_File_filename_OrderByInput = TypedDict(
    '_File_filename_OrderByInput',
    {
        'filename': 'SortOrder',
    },
    total=True
)

_File_content_OrderByInput = TypedDict(
    '_File_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_File_response_OrderByInput = TypedDict(
    '_File_response_OrderByInput',
    {
        'response': 'SortOrder',
    },
    total=True
)

_File_userId_OrderByInput = TypedDict(
    '_File_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_File_createdAt_OrderByInput = TypedDict(
    '_File_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_File_updatedAt_OrderByInput = TypedDict(
    '_File_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

FileOrderByInput = Union[
    '_File_id_OrderByInput',
    '_File_model_OrderByInput',
    '_File_filename_OrderByInput',
    '_File_content_OrderByInput',
    '_File_response_OrderByInput',
    '_File_userId_OrderByInput',
    '_File_createdAt_OrderByInput',
    '_File_updatedAt_OrderByInput',
]



# recursive File types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

FileRelationFilter = TypedDict(
    'FileRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class FileListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class FileInclude(TypedDict, total=False):
    """File relational arguments"""
    user: Union[bool, 'UserArgsFromFile']


    

class UserIncludeFromFile(TypedDict, total=False):
    """Relational arguments for File"""
    stories: Union[bool, 'FindManyStoryArgsFromFileRecursive1']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromFileRecursive1']
    files: Union[bool, 'FindManyFileArgsFromFileRecursive1']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromFileRecursive1']


class UserIncludeFromFileRecursive1(TypedDict, total=False):
    """Relational arguments for File"""
    stories: Union[bool, 'FindManyStoryArgsFromFileRecursive2']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromFileRecursive2']
    files: Union[bool, 'FindManyFileArgsFromFileRecursive2']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromFileRecursive2']


class UserIncludeFromFileRecursive2(TypedDict, total=False):
    """Relational arguments for File"""
    stories: Union[bool, 'FindManyStoryArgsFromFileRecursive3']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromFileRecursive3']
    files: Union[bool, 'FindManyFileArgsFromFileRecursive3']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromFileRecursive3']


class UserIncludeFromFileRecursive3(TypedDict, total=False):
    """Relational arguments for File"""
    stories: Union[bool, 'FindManyStoryArgsFromFileRecursive4']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromFileRecursive4']
    files: Union[bool, 'FindManyFileArgsFromFileRecursive4']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromFileRecursive4']


class UserIncludeFromFileRecursive4(TypedDict, total=False):
    """Relational arguments for File"""

    

class UserArgsFromFile(TypedDict, total=False):
    """Arguments for File"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromFileRecursive1(TypedDict, total=False):
    """Arguments for File"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromFileRecursive2(TypedDict, total=False):
    """Arguments for File"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromFileRecursive3(TypedDict, total=False):
    """Arguments for File"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromFileRecursive4(TypedDict, total=False):
    """Arguments for File"""
    
    

class FindManyUserArgsFromFile(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromFileRecursive1(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromFileRecursive2(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromFileRecursive3(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromFileRecursive4(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class StoryIncludeFromFile(TypedDict, total=False):
    """Relational arguments for File"""
    user: Union[bool, 'UserArgsFromFileRecursive1']


class StoryIncludeFromFileRecursive1(TypedDict, total=False):
    """Relational arguments for File"""
    user: Union[bool, 'UserArgsFromFileRecursive2']


class StoryIncludeFromFileRecursive2(TypedDict, total=False):
    """Relational arguments for File"""
    user: Union[bool, 'UserArgsFromFileRecursive3']


class StoryIncludeFromFileRecursive3(TypedDict, total=False):
    """Relational arguments for File"""
    user: Union[bool, 'UserArgsFromFileRecursive4']


class StoryIncludeFromFileRecursive4(TypedDict, total=False):
    """Relational arguments for File"""

    

class StoryArgsFromFile(TypedDict, total=False):
    """Arguments for File"""
    include: 'StoryIncludeFromStoryRecursive1'


class StoryArgsFromFileRecursive1(TypedDict, total=False):
    """Arguments for File"""
    include: 'StoryIncludeFromStoryRecursive2'


class StoryArgsFromFileRecursive2(TypedDict, total=False):
    """Arguments for File"""
    include: 'StoryIncludeFromStoryRecursive3'


class StoryArgsFromFileRecursive3(TypedDict, total=False):
    """Arguments for File"""
    include: 'StoryIncludeFromStoryRecursive4'


class StoryArgsFromFileRecursive4(TypedDict, total=False):
    """Arguments for File"""
    
    

class FindManyStoryArgsFromFile(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive1'


class FindManyStoryArgsFromFileRecursive1(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive2'


class FindManyStoryArgsFromFileRecursive2(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive3'


class FindManyStoryArgsFromFileRecursive3(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive4'


class FindManyStoryArgsFromFileRecursive4(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    
    

class ChatMessageIncludeFromFile(TypedDict, total=False):
    """Relational arguments for File"""
    user: Union[bool, 'UserArgsFromFileRecursive1']


class ChatMessageIncludeFromFileRecursive1(TypedDict, total=False):
    """Relational arguments for File"""
    user: Union[bool, 'UserArgsFromFileRecursive2']


class ChatMessageIncludeFromFileRecursive2(TypedDict, total=False):
    """Relational arguments for File"""
    user: Union[bool, 'UserArgsFromFileRecursive3']


class ChatMessageIncludeFromFileRecursive3(TypedDict, total=False):
    """Relational arguments for File"""
    user: Union[bool, 'UserArgsFromFileRecursive4']


class ChatMessageIncludeFromFileRecursive4(TypedDict, total=False):
    """Relational arguments for File"""

    

class ChatMessageArgsFromFile(TypedDict, total=False):
    """Arguments for File"""
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class ChatMessageArgsFromFileRecursive1(TypedDict, total=False):
    """Arguments for File"""
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class ChatMessageArgsFromFileRecursive2(TypedDict, total=False):
    """Arguments for File"""
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class ChatMessageArgsFromFileRecursive3(TypedDict, total=False):
    """Arguments for File"""
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class ChatMessageArgsFromFileRecursive4(TypedDict, total=False):
    """Arguments for File"""
    
    

class FindManyChatMessageArgsFromFile(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class FindManyChatMessageArgsFromFileRecursive1(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class FindManyChatMessageArgsFromFileRecursive2(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class FindManyChatMessageArgsFromFileRecursive3(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class FindManyChatMessageArgsFromFileRecursive4(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    
    

class FileIncludeFromFile(TypedDict, total=False):
    """Relational arguments for File"""
    user: Union[bool, 'UserArgsFromFileRecursive1']


class FileIncludeFromFileRecursive1(TypedDict, total=False):
    """Relational arguments for File"""
    user: Union[bool, 'UserArgsFromFileRecursive2']


class FileIncludeFromFileRecursive2(TypedDict, total=False):
    """Relational arguments for File"""
    user: Union[bool, 'UserArgsFromFileRecursive3']


class FileIncludeFromFileRecursive3(TypedDict, total=False):
    """Relational arguments for File"""
    user: Union[bool, 'UserArgsFromFileRecursive4']


class FileIncludeFromFileRecursive4(TypedDict, total=False):
    """Relational arguments for File"""

    

class FileArgsFromFile(TypedDict, total=False):
    """Arguments for File"""
    include: 'FileIncludeFromFileRecursive1'


class FileArgsFromFileRecursive1(TypedDict, total=False):
    """Arguments for File"""
    include: 'FileIncludeFromFileRecursive2'


class FileArgsFromFileRecursive2(TypedDict, total=False):
    """Arguments for File"""
    include: 'FileIncludeFromFileRecursive3'


class FileArgsFromFileRecursive3(TypedDict, total=False):
    """Arguments for File"""
    include: 'FileIncludeFromFileRecursive4'


class FileArgsFromFileRecursive4(TypedDict, total=False):
    """Arguments for File"""
    
    

class FindManyFileArgsFromFile(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive1'


class FindManyFileArgsFromFileRecursive1(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive2'


class FindManyFileArgsFromFileRecursive2(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive3'


class FindManyFileArgsFromFileRecursive3(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive4'


class FindManyFileArgsFromFileRecursive4(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    
    

class GeneratedContentIncludeFromFile(TypedDict, total=False):
    """Relational arguments for File"""
    user: Union[bool, 'UserArgsFromFileRecursive1']


class GeneratedContentIncludeFromFileRecursive1(TypedDict, total=False):
    """Relational arguments for File"""
    user: Union[bool, 'UserArgsFromFileRecursive2']


class GeneratedContentIncludeFromFileRecursive2(TypedDict, total=False):
    """Relational arguments for File"""
    user: Union[bool, 'UserArgsFromFileRecursive3']


class GeneratedContentIncludeFromFileRecursive3(TypedDict, total=False):
    """Relational arguments for File"""
    user: Union[bool, 'UserArgsFromFileRecursive4']


class GeneratedContentIncludeFromFileRecursive4(TypedDict, total=False):
    """Relational arguments for File"""

    

class GeneratedContentArgsFromFile(TypedDict, total=False):
    """Arguments for File"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive1'


class GeneratedContentArgsFromFileRecursive1(TypedDict, total=False):
    """Arguments for File"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive2'


class GeneratedContentArgsFromFileRecursive2(TypedDict, total=False):
    """Arguments for File"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive3'


class GeneratedContentArgsFromFileRecursive3(TypedDict, total=False):
    """Arguments for File"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive4'


class GeneratedContentArgsFromFileRecursive4(TypedDict, total=False):
    """Arguments for File"""
    
    

class FindManyGeneratedContentArgsFromFile(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive1'


class FindManyGeneratedContentArgsFromFileRecursive1(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive2'


class FindManyGeneratedContentArgsFromFileRecursive2(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive3'


class FindManyGeneratedContentArgsFromFileRecursive3(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive4'


class FindManyGeneratedContentArgsFromFileRecursive4(TypedDict, total=False):
    """Arguments for File"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    


FindManyFileArgs = FindManyFileArgsFromFile
FindFirstFileArgs = FindManyFileArgsFromFile


    

class FileWhereInput(TypedDict, total=False):
    """File arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    filename: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    response: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['FileWhereInputRecursive1', List['FileWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['FileWhereInputRecursive1']
    OR: List['FileWhereInputRecursive1']
    NOT: List['FileWhereInputRecursive1']


class FileWhereInputRecursive1(TypedDict, total=False):
    """File arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    filename: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    response: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['FileWhereInputRecursive2', List['FileWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['FileWhereInputRecursive2']
    OR: List['FileWhereInputRecursive2']
    NOT: List['FileWhereInputRecursive2']


class FileWhereInputRecursive2(TypedDict, total=False):
    """File arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    filename: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    response: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['FileWhereInputRecursive3', List['FileWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['FileWhereInputRecursive3']
    OR: List['FileWhereInputRecursive3']
    NOT: List['FileWhereInputRecursive3']


class FileWhereInputRecursive3(TypedDict, total=False):
    """File arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    filename: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    response: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['FileWhereInputRecursive4', List['FileWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['FileWhereInputRecursive4']
    OR: List['FileWhereInputRecursive4']
    NOT: List['FileWhereInputRecursive4']


class FileWhereInputRecursive4(TypedDict, total=False):
    """File arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    filename: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    response: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate File types


    

class FileScalarWhereWithAggregatesInput(TypedDict, total=False):
    """File arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    filename: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    response: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FileScalarWhereWithAggregatesInputRecursive1']
    OR: List['FileScalarWhereWithAggregatesInputRecursive1']
    NOT: List['FileScalarWhereWithAggregatesInputRecursive1']


class FileScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """File arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    filename: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    response: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FileScalarWhereWithAggregatesInputRecursive2']
    OR: List['FileScalarWhereWithAggregatesInputRecursive2']
    NOT: List['FileScalarWhereWithAggregatesInputRecursive2']


class FileScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """File arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    filename: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    response: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FileScalarWhereWithAggregatesInputRecursive3']
    OR: List['FileScalarWhereWithAggregatesInputRecursive3']
    NOT: List['FileScalarWhereWithAggregatesInputRecursive3']


class FileScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """File arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    filename: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    response: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FileScalarWhereWithAggregatesInputRecursive4']
    OR: List['FileScalarWhereWithAggregatesInputRecursive4']
    NOT: List['FileScalarWhereWithAggregatesInputRecursive4']


class FileScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """File arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    filename: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    response: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class FileGroupByOutput(TypedDict, total=False):
    id: _str
    model: _str
    filename: _str
    content: _str
    response: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'FileSumAggregateOutput'
    _avg: 'FileAvgAggregateOutput'
    _min: 'FileMinAggregateOutput'
    _max: 'FileMaxAggregateOutput'
    _count: 'FileCountAggregateOutput'


class FileAvgAggregateOutput(TypedDict, total=False):
    """File output for aggregating averages"""


class FileSumAggregateOutput(TypedDict, total=False):
    """File output for aggregating sums"""


class FileScalarAggregateOutput(TypedDict, total=False):
    """File output including scalar fields"""
    id: _str
    model: _str
    filename: _str
    content: _str
    response: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


FileMinAggregateOutput = FileScalarAggregateOutput
FileMaxAggregateOutput = FileScalarAggregateOutput


class FileMaxAggregateInput(TypedDict, total=False):
    """File input for aggregating by max"""
    id: bool
    model: bool
    filename: bool
    content: bool
    response: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class FileMinAggregateInput(TypedDict, total=False):
    """File input for aggregating by min"""
    id: bool
    model: bool
    filename: bool
    content: bool
    response: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class FileNumberAggregateInput(TypedDict, total=False):
    """File input for aggregating numbers"""


FileAvgAggregateInput = FileNumberAggregateInput
FileSumAggregateInput = FileNumberAggregateInput


FileCountAggregateInput = TypedDict(
    'FileCountAggregateInput',
    {
        'id': bool,
        'model': bool,
        'filename': bool,
        'content': bool,
        'response': bool,
        'userId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

FileCountAggregateOutput = TypedDict(
    'FileCountAggregateOutput',
    {
        'id': int,
        'model': int,
        'filename': int,
        'content': int,
        'response': int,
        'userId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


FileKeys = Literal[
    'id',
    'model',
    'filename',
    'content',
    'response',
    'userId',
    'user',
    'createdAt',
    'updatedAt',
]
FileScalarFieldKeys = Literal[
    'id',
    'model',
    'filename',
    'content',
    'response',
    'userId',
    'createdAt',
    'updatedAt',
]
FileScalarFieldKeysT = TypeVar('FileScalarFieldKeysT', bound=FileScalarFieldKeys)

FileRelationalFieldKeys = Literal[
        'user',
    ]

# GeneratedContent types

class GeneratedContentOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the GeneratedContent create method"""
    id: _str
    isPublic: _bool
    filename: Optional[_str]
    prompt: Optional[_str]
    fileUrl: Optional[_str]
    metadata: Optional['fields.Json']
    userId: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class GeneratedContentCreateInput(GeneratedContentOptionalCreateInput):
    """Required arguments to the GeneratedContent create method"""
    type: 'enums.ContentType'
    title: _str
    content: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class GeneratedContentOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the GeneratedContent create method, without relations"""
    id: _str
    isPublic: _bool
    filename: Optional[_str]
    prompt: Optional[_str]
    fileUrl: Optional[_str]
    metadata: Optional['fields.Json']
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class GeneratedContentCreateWithoutRelationsInput(GeneratedContentOptionalCreateWithoutRelationsInput):
    """Required arguments to the GeneratedContent create method, without relations"""
    type: 'enums.ContentType'
    title: _str
    content: _str

class GeneratedContentConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'GeneratedContentCreateWithoutRelationsInput'
    where: 'GeneratedContentWhereUniqueInput'

class GeneratedContentCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'GeneratedContentCreateWithoutRelationsInput'
    connect: 'GeneratedContentWhereUniqueInput'
    connect_or_create: 'GeneratedContentConnectOrCreateWithoutRelationsInput'


class GeneratedContentCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['GeneratedContentCreateWithoutRelationsInput', List['GeneratedContentCreateWithoutRelationsInput']]
    connect: Union['GeneratedContentWhereUniqueInput', List['GeneratedContentWhereUniqueInput']]
    connect_or_create: Union['GeneratedContentConnectOrCreateWithoutRelationsInput', List['GeneratedContentConnectOrCreateWithoutRelationsInput']]

_GeneratedContentWhereUnique_id_Input = TypedDict(
    '_GeneratedContentWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

GeneratedContentWhereUniqueInput = _GeneratedContentWhereUnique_id_Input


class GeneratedContentUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    type: 'enums.ContentType'
    isPublic: _bool
    title: _str
    filename: Optional[_str]
    prompt: Optional[_str]
    content: _str
    fileUrl: Optional[_str]
    metadata: Optional['fields.Json']
    user: 'UserUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class GeneratedContentUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    type: 'enums.ContentType'
    isPublic: _bool
    title: _str
    filename: Optional[_str]
    prompt: Optional[_str]
    content: _str
    fileUrl: Optional[_str]
    metadata: Optional['fields.Json']
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class GeneratedContentUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['GeneratedContentCreateWithoutRelationsInput']
    connect: List['GeneratedContentWhereUniqueInput']
    connect_or_create: List['GeneratedContentConnectOrCreateWithoutRelationsInput']
    set: List['GeneratedContentWhereUniqueInput']
    disconnect: List['GeneratedContentWhereUniqueInput']
    delete: List['GeneratedContentWhereUniqueInput']

    # TODO
    # update: List['GeneratedContentUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['GeneratedContentUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['GeneratedContentScalarWhereInput']
    # upsert: List['GeneratedContentUpserteWithWhereUniqueWithoutRelationsInput']


class GeneratedContentUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'GeneratedContentCreateWithoutRelationsInput'
    connect: 'GeneratedContentWhereUniqueInput'
    connect_or_create: 'GeneratedContentConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'GeneratedContentUpdateInput'
    # upsert: 'GeneratedContentUpsertWithoutRelationsInput'


class GeneratedContentUpsertInput(TypedDict):
    create: 'GeneratedContentCreateInput'
    update: 'GeneratedContentUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_GeneratedContent_id_OrderByInput = TypedDict(
    '_GeneratedContent_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_GeneratedContent_type_OrderByInput = TypedDict(
    '_GeneratedContent_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_GeneratedContent_isPublic_OrderByInput = TypedDict(
    '_GeneratedContent_isPublic_OrderByInput',
    {
        'isPublic': 'SortOrder',
    },
    total=True
)

_GeneratedContent_title_OrderByInput = TypedDict(
    '_GeneratedContent_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_GeneratedContent_filename_OrderByInput = TypedDict(
    '_GeneratedContent_filename_OrderByInput',
    {
        'filename': 'SortOrder',
    },
    total=True
)

_GeneratedContent_prompt_OrderByInput = TypedDict(
    '_GeneratedContent_prompt_OrderByInput',
    {
        'prompt': 'SortOrder',
    },
    total=True
)

_GeneratedContent_content_OrderByInput = TypedDict(
    '_GeneratedContent_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_GeneratedContent_fileUrl_OrderByInput = TypedDict(
    '_GeneratedContent_fileUrl_OrderByInput',
    {
        'fileUrl': 'SortOrder',
    },
    total=True
)

_GeneratedContent_metadata_OrderByInput = TypedDict(
    '_GeneratedContent_metadata_OrderByInput',
    {
        'metadata': 'SortOrder',
    },
    total=True
)

_GeneratedContent_userId_OrderByInput = TypedDict(
    '_GeneratedContent_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_GeneratedContent_createdAt_OrderByInput = TypedDict(
    '_GeneratedContent_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_GeneratedContent_updatedAt_OrderByInput = TypedDict(
    '_GeneratedContent_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

GeneratedContentOrderByInput = Union[
    '_GeneratedContent_id_OrderByInput',
    '_GeneratedContent_type_OrderByInput',
    '_GeneratedContent_isPublic_OrderByInput',
    '_GeneratedContent_title_OrderByInput',
    '_GeneratedContent_filename_OrderByInput',
    '_GeneratedContent_prompt_OrderByInput',
    '_GeneratedContent_content_OrderByInput',
    '_GeneratedContent_fileUrl_OrderByInput',
    '_GeneratedContent_metadata_OrderByInput',
    '_GeneratedContent_userId_OrderByInput',
    '_GeneratedContent_createdAt_OrderByInput',
    '_GeneratedContent_updatedAt_OrderByInput',
]



# recursive GeneratedContent types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

GeneratedContentRelationFilter = TypedDict(
    'GeneratedContentRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class GeneratedContentListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class GeneratedContentInclude(TypedDict, total=False):
    """GeneratedContent relational arguments"""
    user: Union[bool, 'UserArgsFromGeneratedContent']


    

class UserIncludeFromGeneratedContent(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    stories: Union[bool, 'FindManyStoryArgsFromGeneratedContentRecursive1']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromGeneratedContentRecursive1']
    files: Union[bool, 'FindManyFileArgsFromGeneratedContentRecursive1']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromGeneratedContentRecursive1']


class UserIncludeFromGeneratedContentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    stories: Union[bool, 'FindManyStoryArgsFromGeneratedContentRecursive2']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromGeneratedContentRecursive2']
    files: Union[bool, 'FindManyFileArgsFromGeneratedContentRecursive2']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromGeneratedContentRecursive2']


class UserIncludeFromGeneratedContentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    stories: Union[bool, 'FindManyStoryArgsFromGeneratedContentRecursive3']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromGeneratedContentRecursive3']
    files: Union[bool, 'FindManyFileArgsFromGeneratedContentRecursive3']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromGeneratedContentRecursive3']


class UserIncludeFromGeneratedContentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    stories: Union[bool, 'FindManyStoryArgsFromGeneratedContentRecursive4']
    chatMessages: Union[bool, 'FindManyChatMessageArgsFromGeneratedContentRecursive4']
    files: Union[bool, 'FindManyFileArgsFromGeneratedContentRecursive4']
    contents: Union[bool, 'FindManyGeneratedContentArgsFromGeneratedContentRecursive4']


class UserIncludeFromGeneratedContentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""

    

class UserArgsFromGeneratedContent(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromGeneratedContentRecursive1(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromGeneratedContentRecursive2(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromGeneratedContentRecursive3(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromGeneratedContentRecursive4(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    
    

class FindManyUserArgsFromGeneratedContent(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromGeneratedContentRecursive1(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromGeneratedContentRecursive2(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromGeneratedContentRecursive3(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromGeneratedContentRecursive4(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class StoryIncludeFromGeneratedContent(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    user: Union[bool, 'UserArgsFromGeneratedContentRecursive1']


class StoryIncludeFromGeneratedContentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    user: Union[bool, 'UserArgsFromGeneratedContentRecursive2']


class StoryIncludeFromGeneratedContentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    user: Union[bool, 'UserArgsFromGeneratedContentRecursive3']


class StoryIncludeFromGeneratedContentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    user: Union[bool, 'UserArgsFromGeneratedContentRecursive4']


class StoryIncludeFromGeneratedContentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""

    

class StoryArgsFromGeneratedContent(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'StoryIncludeFromStoryRecursive1'


class StoryArgsFromGeneratedContentRecursive1(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'StoryIncludeFromStoryRecursive2'


class StoryArgsFromGeneratedContentRecursive2(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'StoryIncludeFromStoryRecursive3'


class StoryArgsFromGeneratedContentRecursive3(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'StoryIncludeFromStoryRecursive4'


class StoryArgsFromGeneratedContentRecursive4(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    
    

class FindManyStoryArgsFromGeneratedContent(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive1'


class FindManyStoryArgsFromGeneratedContentRecursive1(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive2'


class FindManyStoryArgsFromGeneratedContentRecursive2(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive3'


class FindManyStoryArgsFromGeneratedContentRecursive3(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    include: 'StoryIncludeFromStoryRecursive4'


class FindManyStoryArgsFromGeneratedContentRecursive4(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['StoryOrderByInput', List['StoryOrderByInput']]
    where: 'StoryWhereInput'
    cursor: 'StoryWhereUniqueInput'
    distinct: List['StoryScalarFieldKeys']
    
    

class ChatMessageIncludeFromGeneratedContent(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    user: Union[bool, 'UserArgsFromGeneratedContentRecursive1']


class ChatMessageIncludeFromGeneratedContentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    user: Union[bool, 'UserArgsFromGeneratedContentRecursive2']


class ChatMessageIncludeFromGeneratedContentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    user: Union[bool, 'UserArgsFromGeneratedContentRecursive3']


class ChatMessageIncludeFromGeneratedContentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    user: Union[bool, 'UserArgsFromGeneratedContentRecursive4']


class ChatMessageIncludeFromGeneratedContentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""

    

class ChatMessageArgsFromGeneratedContent(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class ChatMessageArgsFromGeneratedContentRecursive1(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class ChatMessageArgsFromGeneratedContentRecursive2(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class ChatMessageArgsFromGeneratedContentRecursive3(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class ChatMessageArgsFromGeneratedContentRecursive4(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    
    

class FindManyChatMessageArgsFromGeneratedContent(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive1'


class FindManyChatMessageArgsFromGeneratedContentRecursive1(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive2'


class FindManyChatMessageArgsFromGeneratedContentRecursive2(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive3'


class FindManyChatMessageArgsFromGeneratedContentRecursive3(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    include: 'ChatMessageIncludeFromChatMessageRecursive4'


class FindManyChatMessageArgsFromGeneratedContentRecursive4(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['ChatMessageOrderByInput', List['ChatMessageOrderByInput']]
    where: 'ChatMessageWhereInput'
    cursor: 'ChatMessageWhereUniqueInput'
    distinct: List['ChatMessageScalarFieldKeys']
    
    

class FileIncludeFromGeneratedContent(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    user: Union[bool, 'UserArgsFromGeneratedContentRecursive1']


class FileIncludeFromGeneratedContentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    user: Union[bool, 'UserArgsFromGeneratedContentRecursive2']


class FileIncludeFromGeneratedContentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    user: Union[bool, 'UserArgsFromGeneratedContentRecursive3']


class FileIncludeFromGeneratedContentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    user: Union[bool, 'UserArgsFromGeneratedContentRecursive4']


class FileIncludeFromGeneratedContentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""

    

class FileArgsFromGeneratedContent(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'FileIncludeFromFileRecursive1'


class FileArgsFromGeneratedContentRecursive1(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'FileIncludeFromFileRecursive2'


class FileArgsFromGeneratedContentRecursive2(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'FileIncludeFromFileRecursive3'


class FileArgsFromGeneratedContentRecursive3(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'FileIncludeFromFileRecursive4'


class FileArgsFromGeneratedContentRecursive4(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    
    

class FindManyFileArgsFromGeneratedContent(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive1'


class FindManyFileArgsFromGeneratedContentRecursive1(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive2'


class FindManyFileArgsFromGeneratedContentRecursive2(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive3'


class FindManyFileArgsFromGeneratedContentRecursive3(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    include: 'FileIncludeFromFileRecursive4'


class FindManyFileArgsFromGeneratedContentRecursive4(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['FileOrderByInput', List['FileOrderByInput']]
    where: 'FileWhereInput'
    cursor: 'FileWhereUniqueInput'
    distinct: List['FileScalarFieldKeys']
    
    

class GeneratedContentIncludeFromGeneratedContent(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    user: Union[bool, 'UserArgsFromGeneratedContentRecursive1']


class GeneratedContentIncludeFromGeneratedContentRecursive1(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    user: Union[bool, 'UserArgsFromGeneratedContentRecursive2']


class GeneratedContentIncludeFromGeneratedContentRecursive2(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    user: Union[bool, 'UserArgsFromGeneratedContentRecursive3']


class GeneratedContentIncludeFromGeneratedContentRecursive3(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""
    user: Union[bool, 'UserArgsFromGeneratedContentRecursive4']


class GeneratedContentIncludeFromGeneratedContentRecursive4(TypedDict, total=False):
    """Relational arguments for GeneratedContent"""

    

class GeneratedContentArgsFromGeneratedContent(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive1'


class GeneratedContentArgsFromGeneratedContentRecursive1(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive2'


class GeneratedContentArgsFromGeneratedContentRecursive2(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive3'


class GeneratedContentArgsFromGeneratedContentRecursive3(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive4'


class GeneratedContentArgsFromGeneratedContentRecursive4(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    
    

class FindManyGeneratedContentArgsFromGeneratedContent(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive1'


class FindManyGeneratedContentArgsFromGeneratedContentRecursive1(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive2'


class FindManyGeneratedContentArgsFromGeneratedContentRecursive2(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive3'


class FindManyGeneratedContentArgsFromGeneratedContentRecursive3(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    include: 'GeneratedContentIncludeFromGeneratedContentRecursive4'


class FindManyGeneratedContentArgsFromGeneratedContentRecursive4(TypedDict, total=False):
    """Arguments for GeneratedContent"""
    take: int
    skip: int
    order_by: Union['GeneratedContentOrderByInput', List['GeneratedContentOrderByInput']]
    where: 'GeneratedContentWhereInput'
    cursor: 'GeneratedContentWhereUniqueInput'
    distinct: List['GeneratedContentScalarFieldKeys']
    


FindManyGeneratedContentArgs = FindManyGeneratedContentArgsFromGeneratedContent
FindFirstGeneratedContentArgs = FindManyGeneratedContentArgsFromGeneratedContent


    

class GeneratedContentWhereInput(TypedDict, total=False):
    """GeneratedContent arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    type: 'enums.ContentType'
    isPublic: Union[_bool, 'types.BooleanFilter']
    title: Union[_str, 'types.StringFilter']
    filename: Union[None, _str, 'types.StringFilter']
    prompt: Union[None, _str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    fileUrl: Union[None, _str, 'types.StringFilter']
    metadata: Union[None, 'fields.Json', 'types.JsonFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['GeneratedContentWhereInputRecursive1', List['GeneratedContentWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['GeneratedContentWhereInputRecursive1']
    OR: List['GeneratedContentWhereInputRecursive1']
    NOT: List['GeneratedContentWhereInputRecursive1']


class GeneratedContentWhereInputRecursive1(TypedDict, total=False):
    """GeneratedContent arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    type: 'enums.ContentType'
    isPublic: Union[_bool, 'types.BooleanFilter']
    title: Union[_str, 'types.StringFilter']
    filename: Union[None, _str, 'types.StringFilter']
    prompt: Union[None, _str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    fileUrl: Union[None, _str, 'types.StringFilter']
    metadata: Union[None, 'fields.Json', 'types.JsonFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['GeneratedContentWhereInputRecursive2', List['GeneratedContentWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['GeneratedContentWhereInputRecursive2']
    OR: List['GeneratedContentWhereInputRecursive2']
    NOT: List['GeneratedContentWhereInputRecursive2']


class GeneratedContentWhereInputRecursive2(TypedDict, total=False):
    """GeneratedContent arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    type: 'enums.ContentType'
    isPublic: Union[_bool, 'types.BooleanFilter']
    title: Union[_str, 'types.StringFilter']
    filename: Union[None, _str, 'types.StringFilter']
    prompt: Union[None, _str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    fileUrl: Union[None, _str, 'types.StringFilter']
    metadata: Union[None, 'fields.Json', 'types.JsonFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['GeneratedContentWhereInputRecursive3', List['GeneratedContentWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['GeneratedContentWhereInputRecursive3']
    OR: List['GeneratedContentWhereInputRecursive3']
    NOT: List['GeneratedContentWhereInputRecursive3']


class GeneratedContentWhereInputRecursive3(TypedDict, total=False):
    """GeneratedContent arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    type: 'enums.ContentType'
    isPublic: Union[_bool, 'types.BooleanFilter']
    title: Union[_str, 'types.StringFilter']
    filename: Union[None, _str, 'types.StringFilter']
    prompt: Union[None, _str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    fileUrl: Union[None, _str, 'types.StringFilter']
    metadata: Union[None, 'fields.Json', 'types.JsonFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['GeneratedContentWhereInputRecursive4', List['GeneratedContentWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['GeneratedContentWhereInputRecursive4']
    OR: List['GeneratedContentWhereInputRecursive4']
    NOT: List['GeneratedContentWhereInputRecursive4']


class GeneratedContentWhereInputRecursive4(TypedDict, total=False):
    """GeneratedContent arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    type: 'enums.ContentType'
    isPublic: Union[_bool, 'types.BooleanFilter']
    title: Union[_str, 'types.StringFilter']
    filename: Union[None, _str, 'types.StringFilter']
    prompt: Union[None, _str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    fileUrl: Union[None, _str, 'types.StringFilter']
    metadata: Union[None, 'fields.Json', 'types.JsonFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate GeneratedContent types


    

class GeneratedContentScalarWhereWithAggregatesInput(TypedDict, total=False):
    """GeneratedContent arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.ContentType'
    isPublic: Union[_bool, 'types.BooleanWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    filename: Union[_str, 'types.StringWithAggregatesFilter']
    prompt: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    fileUrl: Union[_str, 'types.StringWithAggregatesFilter']
    metadata: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GeneratedContentScalarWhereWithAggregatesInputRecursive1']
    OR: List['GeneratedContentScalarWhereWithAggregatesInputRecursive1']
    NOT: List['GeneratedContentScalarWhereWithAggregatesInputRecursive1']


class GeneratedContentScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """GeneratedContent arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.ContentType'
    isPublic: Union[_bool, 'types.BooleanWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    filename: Union[_str, 'types.StringWithAggregatesFilter']
    prompt: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    fileUrl: Union[_str, 'types.StringWithAggregatesFilter']
    metadata: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GeneratedContentScalarWhereWithAggregatesInputRecursive2']
    OR: List['GeneratedContentScalarWhereWithAggregatesInputRecursive2']
    NOT: List['GeneratedContentScalarWhereWithAggregatesInputRecursive2']


class GeneratedContentScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """GeneratedContent arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.ContentType'
    isPublic: Union[_bool, 'types.BooleanWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    filename: Union[_str, 'types.StringWithAggregatesFilter']
    prompt: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    fileUrl: Union[_str, 'types.StringWithAggregatesFilter']
    metadata: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GeneratedContentScalarWhereWithAggregatesInputRecursive3']
    OR: List['GeneratedContentScalarWhereWithAggregatesInputRecursive3']
    NOT: List['GeneratedContentScalarWhereWithAggregatesInputRecursive3']


class GeneratedContentScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """GeneratedContent arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.ContentType'
    isPublic: Union[_bool, 'types.BooleanWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    filename: Union[_str, 'types.StringWithAggregatesFilter']
    prompt: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    fileUrl: Union[_str, 'types.StringWithAggregatesFilter']
    metadata: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GeneratedContentScalarWhereWithAggregatesInputRecursive4']
    OR: List['GeneratedContentScalarWhereWithAggregatesInputRecursive4']
    NOT: List['GeneratedContentScalarWhereWithAggregatesInputRecursive4']


class GeneratedContentScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """GeneratedContent arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.ContentType'
    isPublic: Union[_bool, 'types.BooleanWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    filename: Union[_str, 'types.StringWithAggregatesFilter']
    prompt: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    fileUrl: Union[_str, 'types.StringWithAggregatesFilter']
    metadata: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class GeneratedContentGroupByOutput(TypedDict, total=False):
    id: _str
    type: 'enums.ContentType'
    isPublic: _bool
    title: _str
    filename: _str
    prompt: _str
    content: _str
    fileUrl: _str
    metadata: 'fields.Json'
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'GeneratedContentSumAggregateOutput'
    _avg: 'GeneratedContentAvgAggregateOutput'
    _min: 'GeneratedContentMinAggregateOutput'
    _max: 'GeneratedContentMaxAggregateOutput'
    _count: 'GeneratedContentCountAggregateOutput'


class GeneratedContentAvgAggregateOutput(TypedDict, total=False):
    """GeneratedContent output for aggregating averages"""


class GeneratedContentSumAggregateOutput(TypedDict, total=False):
    """GeneratedContent output for aggregating sums"""


class GeneratedContentScalarAggregateOutput(TypedDict, total=False):
    """GeneratedContent output including scalar fields"""
    id: _str
    type: 'enums.ContentType'
    isPublic: _bool
    title: _str
    filename: _str
    prompt: _str
    content: _str
    fileUrl: _str
    metadata: 'fields.Json'
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


GeneratedContentMinAggregateOutput = GeneratedContentScalarAggregateOutput
GeneratedContentMaxAggregateOutput = GeneratedContentScalarAggregateOutput


class GeneratedContentMaxAggregateInput(TypedDict, total=False):
    """GeneratedContent input for aggregating by max"""
    id: bool
    type: bool
    isPublic: bool
    title: bool
    filename: bool
    prompt: bool
    content: bool
    fileUrl: bool
    metadata: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class GeneratedContentMinAggregateInput(TypedDict, total=False):
    """GeneratedContent input for aggregating by min"""
    id: bool
    type: bool
    isPublic: bool
    title: bool
    filename: bool
    prompt: bool
    content: bool
    fileUrl: bool
    metadata: bool
    userId: bool
    createdAt: bool
    updatedAt: bool


class GeneratedContentNumberAggregateInput(TypedDict, total=False):
    """GeneratedContent input for aggregating numbers"""


GeneratedContentAvgAggregateInput = GeneratedContentNumberAggregateInput
GeneratedContentSumAggregateInput = GeneratedContentNumberAggregateInput


GeneratedContentCountAggregateInput = TypedDict(
    'GeneratedContentCountAggregateInput',
    {
        'id': bool,
        'type': bool,
        'isPublic': bool,
        'title': bool,
        'filename': bool,
        'prompt': bool,
        'content': bool,
        'fileUrl': bool,
        'metadata': bool,
        'userId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

GeneratedContentCountAggregateOutput = TypedDict(
    'GeneratedContentCountAggregateOutput',
    {
        'id': int,
        'type': int,
        'isPublic': int,
        'title': int,
        'filename': int,
        'prompt': int,
        'content': int,
        'fileUrl': int,
        'metadata': int,
        'userId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


GeneratedContentKeys = Literal[
    'id',
    'type',
    'isPublic',
    'title',
    'filename',
    'prompt',
    'content',
    'fileUrl',
    'metadata',
    'userId',
    'user',
    'createdAt',
    'updatedAt',
]
GeneratedContentScalarFieldKeys = Literal[
    'id',
    'type',
    'isPublic',
    'title',
    'filename',
    'prompt',
    'content',
    'fileUrl',
    'metadata',
    'userId',
    'createdAt',
    'updatedAt',
]
GeneratedContentScalarFieldKeysT = TypeVar('GeneratedContentScalarFieldKeysT', bound=GeneratedContentScalarFieldKeys)

GeneratedContentRelationalFieldKeys = Literal[
        'user',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields