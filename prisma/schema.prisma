datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

generator client {
  provider             = "prisma-client-py"
  interface           = "asyncio"
  recursive_type_depth = 5
}

enum ContentType {
  CHAT
  PDF
  VOICE
  FILE
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  password      String
  name          String?
  apiKey        String?
  modelName     String?   @default("gemini-pro")
  isVerified    Boolean   @default(false)
  verifiedAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(USER)
  stories       Story[]
  chatMessages  ChatMessage[]
  files         File[]
  contents      GeneratedContent[]
  emailVerified Boolean   @default(false)
}

model Story {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  model     String
  title     String
  content   String
  prompt    String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  model     String
  message   String
  content   String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  model     String
  filename  String
  content   String
  response  String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GeneratedContent {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  type        ContentType
  title       String
  filename    String?
  prompt      String?
  content     String      // For chat messages or text content
  fileUrl     String?     // For PDFs, voice files, or other file types
  metadata    Json?       // Additional metadata specific to content type
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}